//******************************************************************************
// Laird Connectivity (c) 2014
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// This app provides for a command interface over the uart and the protocol is
// as follows:-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Convention : (1) Case sensitive, and commands are presented in alphabetic order
//              (2) If line ends with \ then it continues on next line. That does
//                  not mean that it should be sent as multiple lines
//              (3) Replace anything between ## 
//              (4) #INTaaaa# means a number in decimal, hex, octal or binary
//                      format -> 23 == 0x17 == h'17 == o'23 == b'10111
//                      aaaa is just a description
//              (5) #HEXaaaa# means a string without delimitors consisting of hex 
//                      characters only aaaa is just a description
//              (6) #STRaaaa# means a string without delimitors
//                      aaaa is just a description
//              (7) "STRaaaa" means a string which must have the " delimitor
//                      aaaa is just a description
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// -----------------------------------------------------------------------------
// advert report initadv #INTadflags# #INTadappearance# #INTmaxdevname#
//   - Initialise an advert report and store in string adv$[#INTstridx#]
//   - and populate it with flags AD with value #INTadflags#, apperance AD if
//   - #INTadappearance# is 1 and device name (full or partial) based on the
//   - value of #INTmaxdevname#
//

//******************************************************************************

//   ======================================================
//   Conditional Compile Masks (they can be additive)
//   ------------------------------------------------------
//
// Higher 16 bits used for feature set
//   0x00010000 : 
//
// Lower 16 bits used for debugging
//   0x00000001 : Enable debugging messages
//   0x00000002 : Enable Asserts printed out of UART
//   0x00000004 : Enable all adverts print
//   
//
//   ======================================================
//#set $cmpif, 0xFFFFFFFF  //All Features + all debug messages
#set $cmpif, 0xFFFF0000  //All Features + No debug messages


//******************************************************************************
// Definitions
//******************************************************************************

        // size of i[]
#define NUM_OF_I_PARAMS                     (8)
        // size of s$[] and must be at least 8 elements for BleSvcRegDevInfo()     
#define NUM_OF_S_PARAMS                     (8)
        //Number of advert reports
#define NUM_OF_ADV                          (4)

#define ADTYPE_MESH_PB_ADV                0x29
#define ADTYPE_MESH_MESSAGE               0x2A
#define ADTYPE_MESH_BEACON                0x2B

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  print "\n OnErr - ";GetLastError();"\n"
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource as early as possible
//******************************************************************************

//==============================================================================
//==============================================================================
sub AssertResCode(byval rc as integer,byval tag as integer)
  if rc!=0 then
    print "\nFailed with ";integer.h' rc;" at tag ";tag
  endif
endsub

//******************************************************************************
// Library Import
//******************************************************************************

//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc
dim stRsp$ as string        //Uart rx data is stored here

dim ok$,er$,pr$

dim i[NUM_OF_I_PARAMS]      // index 0 used for return values
dim s$[NUM_OF_S_PARAMS]    // must be at least 8 elements for BleSvcRegDevInfo()

dim urtcmd$                 //cmd line from uart
dim tkn$,tlen               //used by command parser
dim urts                    //will be <0 if uart parser suspended
dim advmax                  //max adverts to receive, 0 means unlimited

dim adval$,field$

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************

ok$    = "\nOK"
er$    = "\nERROR "
pr$    = "\r\n>"

urts=0 //not suspended

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************


//==============================================================================
//==============================================================================
function ClearS() 
  dim j
  for j = 0 to (NUM_OF_S_PARAMS-1)
    s$[j]=""
  next
endfunc 0

//==============================================================================
//==============================================================================
function ClearI()
  dim j
  for j = 0 to (NUM_OF_I_PARAMS-1)
    i[j]=0
  next
endfunc 0

//==============================================================================
//==============================================================================
sub UartRsp(rsp as integer)
  if rsp == 0 then
    print ok$;pr$
  elseif rsp > 0 then 
    print er$;integer.h' rsp;pr$
  endif
  urts = rsp
endsub

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractIntTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractIntToken(u$,i[stIdx])
    if tlen == 0 then
      exitfunc 4
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractStrTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,s$[stIdx])
    if tlen == 0 then
      exitfunc 3
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractAddrTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,tkn$)
    if tlen == 0 then
      exitfunc 3
    endif
    s$[stIdx]=StrDehexize$(tkn$)
    if strlen(s$[stIdx]) != 7 then
      exitfunc 5
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//#CMD#//  uuid sig #INT16bitUuid#
//#CMD#//  uuid custom #HEX32hexChrs#
//#CMD#//  uuid sibling #INTuuidHandle# #INT16bitUuid#
//-------------------------------------------------------------------------
function _uuid()  
  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen == 0 then
    exitfunc 5
  endif
  if strcmp(tkn$,"sig")==0 then
    //extract 1 (#INT16bitUuid#) and store starting at i[1]
    rc = ExtractIntTokens(urtcmd$,1,1)
    if rc != 0 then
      exitfunc rc
    endif
    i[0] = BleHandleUuid16(i[1])
    print "\n0x";integer.h' i[0];"\r"
    exitfunc 0
  endif
  if strcmp(tkn$,"custom")==0 then
    //extract 1 (#HEX32hexChrs#) and store starting at s$[1]
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
      exitfunc 5
    endif
    s$[1]=StrDehexize$(tkn$)
    if strlen(s$[1]) != 16 then
      exitfunc 5
    endif
    i[0] = BleHandleUuid128(s$[1])
    print "\n0x";integer.h' i[0];"\r"
    exitfunc 0
  endif
  if strcmp(tkn$,"sibling")==0 then
    //extract 2 (#INTuuidHandle# #INT16bitUuid#) and store starting at i[1]
    rc = ExtractIntTokens(urtcmd$,1,2)
    if rc != 0 then
      exitfunc rc
    endif
    i[0] = BleHandleUuidSibling(i[1],i[2])
    print "\n0x";integer.h' i[0];"\r"
    exitfunc 0
  endif
endfunc 5

//-------------------------------------------------------------------------
//#CMD#//  misc sysinfo #INTformat# #INTid#    //INTformat: 0=dex, 1=Oct, 2=binary, 3=hex
//#CMD#//  misc sysinfo$ #INTid#
//#CMD#//  misc s$ clearall
//#CMD#//  misc s$ set #INTidx# #STRescapedvalue#
//#CMD#//  misc i  clearall
//#CMD#//  misc i  set #INTidx# #INTval#
//-------------------------------------------------------------------------
function _Misc()  
  dim ad$
  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen == 0 then
    exitfunc 5
  endif
  //=================================================
  if strcmp(tkn$,"sysinfo")==0 then
    //extract 2 (#INTformat# #INTid#) and store starting at i[1]
    rc = ExtractIntTokens(urtcmd$,1,2)
    if rc != 0 then
      exitfunc rc
    endif
    rc=sysinfo(i[2])
    print "\n"
    select i[1]
    case 1 //octal
      print integer.o' rc
    case 2 //binary
      print integer.b' rc
    case 3 //hex
      print integer.h' rc
    case else  //decimal
      print rc
    endselect
    exitfunc 0
  endif
  //=================================================
  if strcmp(tkn$,"sysinfo$")==0 then
    //extract 1 (#INTid#) and store starting at i[1]
    rc = ExtractIntTokens(urtcmd$,1,1)
    if rc != 0 then
      exitfunc rc
    endif
    print "\n";sysinfo$(i[1])
    exitfunc 0
  endif
  //=================================================
  if strcmp(tkn$,"s$")==0 then
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
      exitfunc 5
    endif
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"clearall")==0 then
      exitfunc ClearS()
    endif  
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"set")==0 then
      //extract 1 (#INTidx#) and store starting at i[1]
      rc = ExtractIntTokens(urtcmd$,1,1)
      if rc != 0 then
        exitfunc rc
      endif
      if (i[1] < 0) || (i[1] >= NUM_OF_S_PARAMS) then 
        exitfunc 6
      endif
      //extract 1 (#STRescapedvalue#) and store starting at s$[1]
      rc = ExtractStrTokens(urtcmd$,i[1],1)
      if rc != 0 then
        exitfunc rc
      endif
      StrDeEscape(s$[i[1]])
      exitfunc 0
    endif  
  endif
  //=================================================
  if strcmp(tkn$,"i")==0 then
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
      exitfunc 5
    endif
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"clearall")==0 then
      exitfunc ClearI()
    endif  
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"set")==0 then
      dim idx
      tlen = ExtractIntToken(urtcmd$,idx)
      if tlen == 0 then
        exitfunc 5
      endif
      if (idx < 0) || (idx >= NUM_OF_I_PARAMS) then 
        exitfunc 6
      endif
      tlen = ExtractIntToken(urtcmd$,i[idx])
      if tlen == 0 then
        exitfunc 5
      endif
      exitfunc 0
    endif  
  endif
endfunc 5

//==============================================================================
//==============================================================================
function OnUartCmd() as integer
  rc=1 //assume there is an error
  tlen = ExtractStrToken(urtcmd$,tkn$) //get first token
  if tlen == 0 then
    rc=0
  elseif tlen > 0 then
    
    if strcmp(tkn$,"uuid")==0 then
      rc = _uuid()
    
    elseif strcmp(tkn$,"misc")==0 then
      rc = _misc()
    
    elseif (strcmp(tkn$,"exit")==0)||(strcmp(tkn$,"stop")==0) then
      //print "\nType..\nRESUME          to continue the application"
      //print "\n? VARNAME       to inspect a variable"    
      //print "\n= VARNAME VALUE to change a variable"    
      stop 
      rc=0
    
    endif
  endif
  // send a response back to the user
  UartRsp(rc)
endfunc 1


//==============================================================================
dim iv,nid
//==============================================================================
sub DisplayAccMsgPDU(pdu$)
  dim ch
  //get IV and NID
  iv=StrGetChr(pdu$,0)
  nid=iv&0x7F : iv=iv>>7
  print "(iv=)";iv;" (nid=)";nid
  //Obfuscated CTL+TTL+SEQ+SRC - 6 bytes
  field$=StrSplitLeft$(pdu$,1)
  field$=StrSplitLeft$(pdu$,6)
  print " (ctl/ttl/seq/src=)";strhexize$(field$)
  //encrypted DST+TransportPDU+MIC
  print " (dst/pdu/mic=)";strhexize$(pdu$)
endsub

//==============================================================================
//==============================================================================
sub DisplayPbAdvPDU(pdu$)
  dim seg,type,len
  //get the Segment number and type
  seg=StrGetChr(pdu$,0)
  type=(seg & 0x3)
  seg=seg>>2
  select type
  case 0
    len=(StrGetChr(pdu$,1)<<8)+StrGetChr(pdu$,2)
    field$=StrSplitLeft$(pdu$,3)
    field$=StrSplitLeft$(pdu$,1)
    print "START (seg#=)";seg;" (len=)";len;" (fcs=)";strhexize$(field$);" (data=)";strhexize$(pdu$)
    
  case 1
    print "ACK"
    if seg!=0 then
      print "   (padding=)";seg
    endif
    
  case 2
    field$=StrSplitLeft$(pdu$,1)
    print "CONT  (seg#=)";seg;" (data=)";strhexize$(pdu$)
    
  case 3
    field$=StrSplitLeft$(pdu$,1)
    print "BCTRL (opcode=)Link"
    select seg
    case 0
      print "OPN"
    case 1
      print "ACK"
    case 2
      print "CLS"
    case else
      print "RFU"
    endselect
    print " (parms=)";strhexize$(pdu$)
    
  case else
  endselect
endsub


//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerUartRxCmd() as integer
  dim nMatch
  
  if urts < 0 then
    //uart parser is suspended
    exitfunc 1
  endif

  //check if CR has been received
  nMatch=UartReadMatch(stRsp$,13)
  if nMatch!=0 then
    //CR exists in the input buffer
    urtcmd$ = strsplitleft$(stRsp$,nMatch)
    exitfunc OnUartCmd()
  endif
endfunc 1


//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  dim ad$,dta$,ndisc,rsi,rc1
  dim i,adtag
  rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  while rc==0
    #cmpif 0x00000004 : print "\nADV: ";strhexize$(dta$);" RS:";rsi
    //scan through the AD tags
    i=0
    rc1=BleGetAdByIndex(i,dta$,adtag,adval$)  
    while rc1==0 
      select adtag
      case ADTYPE_MESH_BEACON
        field$=StrSplitLeft$(adval$,1)
        if strcmp(field$,"\00")==0 then
          field$=StrSplitLeft$(adval$,16)
          print "\n";strhexize$(ad$);" UNPROV[";rsi;"] (DevUUID=)";StrHexize$(field$)
          field$=StrSplitLeft$(adval$,2)
          print " (OOB=)";StrHexize$(field$)
          field$=StrSplitLeft$(adval$,4)
          print " (URIhash=)";StrHexize$(field$)
          
          
        elseif strcmp(field$,"\01")==0 then
          field$=StrSplitLeft$(adval$,1)
          print "\n";strhexize$(ad$);" SECNET[";rsi;"] (Flags=)";StrHexize$(field$)
          field$=StrSplitLeft$(adval$,8)
          print " (NetworkID=)";StrHexize$(field$)
          field$=StrSplitLeft$(adval$,4)
          print " (IV=)";StrHexize$(field$)
          field$=StrSplitLeft$(adval$,8)
          print " (Auth=)";StrHexize$(field$)
          
        endif
        
      case ADTYPE_MESH_MESSAGE
        print "\n";strhexize$(ad$);"    MSG[";rsi;"] "
        DisplayAccMsgPDU(adval$)
        
      case ADTYPE_MESH_PB_ADV
        field$=StrSplitLeft$(adval$,4)
        print "\n";strhexize$(ad$);" PB-ADV[";rsi;"] (LinkID=)";StrHexize$(field$)
        field$=StrSplitLeft$(adval$,1)
        print " (Trans#=)";StrHexize$(field$);" (PDU=)"
        DisplayPbAdvPDU(adval$)
        
      case else
      endselect
      i=i+1
      rc1=BleGetAdByIndex(i,dta$,adtag,adval$)  
    endwhile
    rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  endwhile
endfunc 1

//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVUARTRX                 call HandlerUartRxCmd
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt

//------------------------------------------------------------------------------
// Initialise Services and then wait for events
//------------------------------------------------------------------------------

//==============================================================================
//==============================================================================
sub Initialise()
endsub

//==============================================================================
//==============================================================================
sub Startup()
  //set scan interval in msec
  rc=BleScanConfig(0,250)
  //set scan window in msec
  rc=BleScanConfig(1,240)
  //set scan type
  rc=BleScanConfig(2,1)
  //set advert report cache size (default is 8 )
  rc=BleScanConfig(3,16)
  //start scanning
  rc = BleScanStart(0,0)
  AssertResCode(rc,4210)
endsub


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Initialise()
Startup()

//Send user prompt for uart based command interface
print "\n\rMESH SNIFFER\n\r"
//Send an OK response
UartRsp(0)

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent
