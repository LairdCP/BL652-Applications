//Example :: BleSecMngrAuthFailPref.sb

dim rc, initiator, flags, ioCap, minKeySize, maxKeySize, keyExchange, hHtsSvc, mdCharVal, hHtsMeas, addr$, attr$

#define BLE_SERVICE_SECONDARY                     0
#define BLE_SERVICE_PRIMARY                       1

#define BLE_EVBLEMSGID_CONNECT                    0    //msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                 1    //msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTHENTICATION_FAILED      26   //msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTHENTICATION_SUCCESSFUL  29   //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONFIRM_PAIRING            30   //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONFIRM_TIMED_OUT          31   //msgCtx = connection handle

sub AssertRC(rc, line)
    if rc!=0 then
        print "Failed with ";integer.h' rc;" on line ";line;"\n"
    endif
endsub

//------------------------------------------------------------------------------
// This handler is called when BLE advertising times out
//------------------------------------------------------------------------------
function HndlrBlrAdvTimOut()
    print "Advertising timed out\n"
endfunc 1

//------------------------------------------------------------------------------
// This handler is called when there is a significant BLE event
//------------------------------------------------------------------------------
function HndlrBleMsg(byval nMsgId as integer, byval nCtx as integer)
    if (nMsgId == BLE_EVBLEMSGID_CONNECT) then
        print "Connected - Try reading from Service UUID 0x1809 Characteristic UUID 0x2A1C to initiate pairing from a mobile phone\n"
    elseif (nMsgId == BLE_EVBLEMSGID_DISCONNECT) then
        print "Disconnected\n"
    elseif (nMsgId == BLE_EVBLEMSGID_AUTHENTICATION_FAILED) then
        print "Authentication failed (";nCtx;")\n"
    elseif (nMsgId == BLE_EVBLEMSGID_AUTHENTICATION_SUCCESSFUL) then
        print "Authentication successful (";nCtx;")\n"
    elseif (nMsgId == BLE_EVBLEMSGID_CONFIRM_PAIRING) then
        print "Confirm pairing (";nCtx;")\n"
        rc = BlePairingInfo(nCtx, Initiator, Flags, IOCap, MinKeySize, MaxKeySize, KeyExchange)
        AssertRC(rc, 43)
        print "  Initiator: ";initiator;", Flags: ";integer.h'flags;", IOCap: ";ioCap;", Key size: ";minKeySize;"-";maxKeySize;", Key exchange: ";integer.h'keyExchange;"\n"
        rc = BlePairingResponse(nCtx, 0, 0)
        AssertRC(rc, 46)
        print "Rejected pairing\n"
    elseif (nMsgId == BLE_EVBLEMSGID_CONFIRM_TIMED_OUT) then
        print "Confirm pairing request timed out (";nCtx;")\n"
    endif
endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//Set IO capability to just works
rc = BleSecMngrIoCap(0)

//Set pairing confirmation to all
rc = BleSecMngrPairConf(0xffff)

//Disable disconnecting devices on authorisation failure
rc = BleSecMngrAuthFailPref(0)

//Create a service with single encryption-required read-only characteristic
mdCharVal = BleAttrMetaDataEx(2, 0, 20, 0, rc)
AssertRC(rc, 68)
attr$ = "hello\00worl\64" 
rc = BleServiceNew(BLE_SERVICE_PRIMARY, BleHandleUuid16(0x1809), hHtsSvc)
AssertRC(rc, 71)
rc = BleCharNew(0x2, BleHandleUuid16(0x2A1C), mdCharVal, 0, 0)
AssertRC(rc, 73)
rc = BleCharCommit(hHtsSvc, attr$, hHtsMeas)
AssertRC(rc, 75)
rc = BleServiceCommit(hHtsSvc)
AssertRC(rc, 77)

//Start advertising over BLE
if BleAdvertStart(0, addr$, 250, 60000, 0) == 0 then
    addr$ = sysinfo$(4)
    print "Adverts Started - connect to device named: ";BleGetDeviceName$();", address: ";strhexize$(addr$);"\n"
else
    AssertRC(rc, 84)
    print "Adverts failed to start\n"
endif

//Register event handlers
OnEvent  EVBLEMSG           call HndlrBleMsg
OnEvent  EVBLE_ADV_TIMEOUT  call HndlrBlrAdvTimOut

//Wait for an event
WAITEVENT
