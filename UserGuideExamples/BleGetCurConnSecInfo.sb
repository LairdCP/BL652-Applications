//Example :: BleGetCurConnSecInfo.sb

dim rc, pr$, flags, securityMode, securityLevel

//This example app was tested with a BL654 running the health thermometer sensor sample app
//hts.health.thermometer.custom.sb which requires bonding.

// Put BLE address of target peripheral device here
#define GATT_SERVER_ADDRESS         "01D5AAC604A0BC"

#define BLE_EVBLEMSGID_CONNECT                          0    //msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                       1    //msgCtx = connection handle
#define BLE_EVBLEMSGID_NEW_BOND                         10   //msgCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND                     17   //msgCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                        18   //msgCtx = connection handle

//------------------------------------------------------------------------------
// For debugging
// --- rc = result code
// --- ln = line number
//------------------------------------------------------------------------------
Sub AssertRC(rc,ln)
    if rc!=0 then
        print "\nFail :";integer.h' rc;" at tag ";ln
    endif
EndSub

//------------------------------------------------------------------------------
// EVBLE_CONN_TIMEOUT - BLE connection timed out
//------------------------------------------------------------------------------
function HndlrConnTO()
    print "\nConnection attempt timed out."
endfunc 1

//------------------------------------------------------------------------------
// This handler is called when there is an authkey request event
//------------------------------------------------------------------------------
function HandlerBleAuthkey(BYVAL Conn, BYVAL Type, BYVAL Flags)
    print "\nAuth Key Request, Handle: ";integer.h'Conn;", Type: ";Type
    print "\nPair request: Accepting"
    rc=BleAcceptPairing(Conn,1)
    AssertRC(rc, 42)
    print "\nPairing in progress"
endfunc 1

//------------------------------------------------------------------------------
// This handler is called when authorisation has been successful or failed and
// contains details on it
//------------------------------------------------------------------------------
function HandlerBleAuthInfo(BYVAL Conn, BYVAL Code, BYVAL Source, BYVAL AuthInfoFlags, BYVAL KeyExchange, BYVAL SecurityModeLevels)
    if (Code == 0) then
        //Success
        print "\nAuthorisation was successful, Handle = ";integer.h'Conn;", AuthInfo flags = ";integer.h'AuthInfoFlags;", KeyExchange = ";integer.h'KeyExchange;", SecurityModeLevels = ";integer.h'SecurityModeLevels
        rc=BleGetCurConnSecInfo(Conn, flags, securityMode, securityLevel)
        AssertRC(rc, 55)
        print "\nConSecInfo: Handle = ";integer.h'Conn;", SecInfo flags = ";integer.h'flags;", security mode = ";securityMode;", security level = ";securityLevel
    else
        //Failure
        print "\nAuthorisation failed, Handle: ";integer.h'Conn;", Code: ";Code;", Source: ";Source
    endif
endfunc 1

//------------------------------------------------------------------------------
// This handler is called when there is a significant BLE event
//------------------------------------------------------------------------------
function HndlrBleMsg(byval nMsgId as integer, byval nCtx as integer)
    select nMsgId
        case BLE_EVBLEMSGID_CONNECT
            rc=BleGetCurConnSecInfo(nCtx, flags, securityMode, securityLevel)
            AssertRC(rc, 70)
            print "\nPre-bond: Handle = ";integer.h'nCtx;", SecInfo flags = ";integer.h'flags;", security mode = ";securityMode;", security level = ";securityLevel
            //bond with the peer
            rc=BlePair(nCtx, 1)
            AssertRC(rc, 74)
            print " Bonding..."
        case BLE_EVBLEMSGID_DISCONNECT
            print "\nDisconnected"
        case BLE_EVBLEMSGID_NEW_BOND
            print "\nNew bond created"
        case BLE_EVBLEMSGID_UPDATED_BOND
            print "\nUpdated bond"
        case BLE_EVBLEMSGID_ENCRYPTED
            print "\nConnection now encrypted"
        case else
    endselect
endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************
rc=BleSecMngrIoCap(0)           //set io capability to just works

pr$ = GATT_SERVER_ADDRESS
pr$ = StrDehexize$(pr$)
rc=BleConnect(pr$, 10000, 25, 100, 30000000)
AssertRC(rc, 96)
print "\nConnecting to ";GATT_SERVER_ADDRESS

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
onevent evblemsg           call HndlrBleMsg
onevent evble_conn_timeout call HndlrConnTO
onevent evble_authkey      call HandlerBleAuthkey
onevent evbleauthinfo      call HandlerBleAuthInfo

waitevent

print "\nExiting..."