// Copyright (c) 2016-2021, Laird Connectivity
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// Poll Temperature sensor
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************

        //The temperature sensor is polled this timeout
#define TEMPERATURE_POLL_MS     (2000)

        //SIO that the temperature sensor is connected to
#define GPIO_TEMP_SENSOR        3

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim adRpt$ as string  //Contains the most recent Advertise report
dim scRpt$ as string  //Contains the most recent scan report
dim stRsp$ as string  //Uart rx data is stored here
dim rc                //Return code from function calls
dim inconn            //Will be 0 for no connection, otherwise nonzsero
dim oldtmp

//******************************************************************************
// Initialise Global Variable
//******************************************************************************
inconn = 0            //No connection yet

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
sub AssertRC(byval rc as integer,byval tag as integer)
  if (rc!=0) then
    print "Failed with ";integer.h' rc;" at tag ";tag;"\n"
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsg(byval msg$ as string)
  print msg$
endsub

//==============================================================================
//==============================================================================
sub DbgVal(val)
  print val
endsub

//==============================================================================
//==============================================================================
sub InitTempSensor()
  //Poll sensor on a timer
  TimerStart(0,TEMPERATURE_POLL_MS,1)

  //Setup temperature sensor
  rc = GpioSetFunc(GPIO_TEMP_SENSOR,1,2)  //Remove the pull resistor
  AssertRC(rc, 86)

  //First byte selects the gain (default, 1/6 scaling)
  //Second byte selects the resolution (12-bit)
  //Third byte selects the acquisition time (default).
  //See the BL652 extension manual for further details
  rc = GPIOSETFUNCEX(GPIO_TEMP_SENSOR, 3, "\00\0C\00")
  AssertRC(rc, 93)
endsub

// -----------------------------------------------------------------------------
// Bandgap = 600mv
// Max Adc = 1024 (8-bit mode), 2048 (10-bit mode), 4096 (12-bit mode)
// Gain scaled by 1/6 (Please see the BL652 manual for additional options)
//
// Hence mV = (((adc/MaxADC) * Bandgap)*6)/1
// refactoring for integer maths gives
//  mv = (adc * Bandgap * 6)/(MaxADC)
//  mv = (adc * 600 * 6)/1024 [8-bit mode]
//  mv = (adc * 600 * 6)/2048 [10-bit mode]
//  mv = (adc * 600 * 6)/4096 [12-bit mode]
// -----------------------------------------------------------------------------
function Adc2Mv(adc)
    //By default, ADC pins are in 8-bit mode. This application uses 12-bit mode.

    //8-bit resolution
    //adc = (adc*225)/16

    //10-bit resolution
    //adc = (adc*225)/64

    //12-bit resolution
    adc = (adc*225)/256
endfunc adc

//-----------------------------------------------------------------------------
// Returns temperature in celsius times by 10 (260 = 26.0c)
//-----------------------------------------------------------------------------
function Mv2Temperature(mv)
    mv = ((mv*100 - 185830) / -117)
endfunc mv

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when TIMER 0 expires
//==============================================================================
function HandlerTimer0() as integer
  dim mV,tmp

  mv = Adc2Mv(GpioRead(GPIO_TEMP_SENSOR))
  DbgMsg("\nAdc mV=") : DbgVal(mv)

  tmp = Mv2Temperature(mv)
  DbgMsg("\nTemperature=") : DbgVal(tmp)

endfunc 1


//******************************************************************************
// Equivalent to main() in C
//******************************************************************************
//Print devkit config info
print "\nEnsure there is a jumper on J6 pins 1-2 (TEMP_SENS to SIO_3)"
print "\n\n"

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVTMR0             call HandlerTimer0

//------------------------------------------------------------------------------
// Initialise and then wait for events
//------------------------------------------------------------------------------

DbgMsg("\nPoll Temperature")

InitTempSensor()

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// A Script can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
DbgMsg("\nWait for event")
WaitEvent
DbgMsg("\nPost WAITEVENT")
