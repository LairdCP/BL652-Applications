// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Copyright (c) 2017, Laird                                                  ++
//                                                                            ++
// Permission to use, copy, modify, and/or distribute this software for any   ++
// purpose with or without fee is hereby granted                              ++
//                                                                            ++
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES   ++
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF           ++
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR    ++
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES     ++
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN      ++
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR ++
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                ++
//                                                                            ++
// SPDX-License-Identifier:ISC                                                ++
//                                                                            ++
// <description>                                                              ++
//                                                                            ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app to the module it will be saved    ++
// +++++  as a file with filename $autorun$ which means it will run           ++
// +++++  automatically on reset.                                             ++
// +++++  The File System can be queried using the command AT+DIR             ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// This application provides a bridge between the uart and Laird's virtual
// serial port profile so that data can be transparently relayed from a host
// connected to the uart and ble connection and vice versa.
//
// In addition if there is no activity, while the BLE connection is up, the 
// uart is closed but with the RX line configured for a high to low transition
// detection so that it can be opened. This comes at the expense of the first
// uncoming uart character potentially lost (depending on baudrate).
//
// There is a state machine that this application maintains to manage this optimised
// operation and to ensure that host connected to the uart can follow it, various
// functions (callbacks) are called that can be used to customise the behaviour
// as follow (these callbacks are in file custom.low.power.vsp.uart.bridge.sb ):-
//
//  OnInitGPIO() 
//    --Called very early on startup AFTER the Uart has been opened
//
//  OnStartupDone() 
//    --Called when startup is done
//
//  OnAdvertStart() 
//    --Called after adverts have been started
//
//  OnAdvertStopped() 
//    --Called after adverts have been stopped ( when connection happens )
//
//  OnUartClosing(fConn) 
//    --Called just before uart is to be closed because of no activity.
//    -- Return 0 to allow, otherise time in msec to extend the timer
//    -- If the exten value is negative, then default UART_IDLE_TIMEOUT_MS used
//
//  OnUartClose() 
//    --Called after uart is actually closed
//
//  OnUartOpen(fConn) 
//    --Called on uart is opened. 
//    -- The fConn==0 when no connection, and 1 when in a BLE connected state
//
//  OnUartRxNoConn(byref uartRx$)
//    --Called when uart data has arrived when there is no connection
//                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
//  OnConnect(hConn,intrvl,sprvto,slat) 
//    --Called on connection 
//            hConn  = the connection handle
//            intrvl = connection interval in microseconds
//            sprvto = link supervision timeout in microseconds
//            slat   = slave latency
//
//  OnConnParmChange(hConn,intrvl,sprvto,slat)
//    --Called on conn parm change 
//            hConn  = the connection handle
//            intrvl = connection interval in microseconds
//            sprvto = link supervision timeout in microseconds
//            slat   = slave latency
//
//  OnDisconnection(hConn)  
//    --Called on disconnection, the connection handle can be found in hVspConn
//
// Examination of the messages shows that the character ! is used when there is
// no ble connection and the character ^ is ised when there is a connection so
// a useful way to infer connection status.
// Also \n is the linefeed chr (0x0A) and \r is the carriage return chr (0x0D)
// 
// Warning: An incmoming uart character will result in the uart being opened
// automatically and that character will be lost, unless the baudate is very low
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// MECHANISM TO REOPEN THE UART
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// -----------------------------------
// Option 1 (Default behavior, use RX)
// -----------------------------------
// By default using the #defines UART_REOPEN_SIONUM and UART_REOPEN_STATE_CHANGE
// the mechanism to reopen the uart is for the uart host to either send a sacrificial
// character or a uart_break.
//                ^^^^^^^^^^
// It is recommended that if a sacrificial character is sent then it be one of the
// following values :- 
//   0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE
// Because it will result in a single low to high transition and so NOT result
// in any extraneous random data from being received.
// 
// -----------------------------------
// Option 2 (Use CTS input)
// -----------------------------------
// Change UART_REOPEN_SIONUM to the pin number for the UART_CTS line and the 
// value for UART_REOPEN_STATE_CHANGE to UART_REOPEN_TRANSITION_HI_to_LO.
// Then the uart host can deassert and reassert its RTS output line to force
// the module to open the uart.
// 
//******************************************************************************

//******************************************************************************
// Version History
//******************************************************************************
//
#define APP_VERSION                                   "v1.40"
//
//v1.40 (17 Aug 2018)
//  - Bug Fix: When sending very long strings, only a portion is sent then it
//             stops and then the next blocks only came after sending some
//             characters to trigger the next block. Fixed by adding the event
//             EVVSPTXEMEPTY to keep the pump primed.
//  - Enhancement : 
//             When the uart is closed, the state of the RTS line is specified
//             via the UART_RTS_STATE_ON_CLOSE in the custom file and that
//             is now set for 1 so that when uart is closed the peer's CTS
//             will deassert and so it will know it cannot send any data
//
//v1.30 (3 Jan 2018)
//  - Bug Fix: Using UART_CTS to re-open uart now works (After closing uart_cts
//             was not being configured as a general purpose input
//
//v1.20 (13 Jun 2017)
//  - Improved customisation so that customer does not need to alter this file
//    but the customisation one
//  - Added the OnConnParmChange callback 
//
//v1.10 (31 May 2017)
//  Improved the wakeup and callback mechanism
//
//v1.00 (30 May 2017)
//  Initial Release - requires any character to reopon the uart.
//
//******************************************************************************
// Definitions
//******************************************************************************

//******************************************************************************
// Definitions
//..............................................................................
//
//It is NOT recommened that the following be modified, but feel free if you
//feel confident about the implications
//******************************************************************************

//                                                  -----
//These are the SIO pin numbers for the uart on the BL652
//                                                  ^^^^^
#define UART_SIONUM_RX                                8
#define UART_SIONUM_CTS                               7
#define UART_SIONUM_TX                                6
#define UART_SIONUM_RTS                               5
#define UART_REOPEN_TRANSITION_LO_to_HI               0
#define UART_REOPEN_TRANSITION_HI_to_LO               1

#define DEVICENAME_WRITABLE                           0
#define AD_FLAGS                                      2
#define MAX_UART_READ_LEN                             256
#define UART_IDLE_REPOLL_TIMEOUT_MS                   1000
#define UART_GPIO_ASSIGN_CHANNEL                      0

//Invalid connection handle
#define INVALID_CONN_HANDLE                           0

//types of adverts
#define ADV_IND                                       0
#define ADV_DIRECT_IND                                1
#define ADV_SCAN_IND                                  2
#define ADV_NONCONN_IND                               3

//Values in curState variable
#define STATE_INIT                                    0
#define STATE_IDLE_UART_OPEN                          10
#define STATE_IDLE_UART_CLOSE                         20
#define STATE_CONN_UART_OPEN                          30
#define STATE_CONN_UART_CLOSE                         40

#define STATE_TIMER                                   0

//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                          0    //msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                       1    //msgCtx = connection handle
#define BLE_EVBLEMSGID_IMMEDIATE_ALERT_SERVICE_ALERT    2    //msgCtx = alert level
#define BLE_EVBLEMSGID_LINKLOSS_SERVICE_ALERT           3    //msgCtx = alert level
#define BLE_EVBLEMSGID_SERVICE_ERROR                    4    //msgCtx = resultcode
#define BLE_EVBLEMSGID_HTS_INDICATION_STATE             5    //msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_HTS_INDICATION_CNF               6    //msgCtx = not used
#define BLE_EVBLEMSGID_BPS_INDICATION_STATE             7    //msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_BPS_INDICATION_CNF               8    //msgCtx = not used
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY                  9    //msgCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                         10   //msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST                 11   //msgCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE           12   //msgCtx = new notification state 0=off, 1=on
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE                14   //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL           15   //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER            16   //msgCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND                     17   //msgCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                        18   //msgCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING            19   //msgCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED                      20   //msgCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE                 21   //msgCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE                 21   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_BOND_ADDFAIL                     22   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_SRVCCHNG_IND_SENT                23   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_SRVCCHNG_IND_CNF                 24   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_OOB_AVAILABLE_REQEST             25   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_AUTHENTICATION_FAILED            26   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_LESC_PAIRING                     27   //msgCtx = connection handle */
#define BLE_EVBLEMSGID_LESC_OOB_REQUEST                 28   //msgCtx = connection handle */

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

//Result code variable (used for checking if a function completed successfully or not)
dim rc

//Don't care value
dim dontcare
dim dontcare$

//When the VSP is opened, the uuid is returned in this variable
dim hVspUuid

//Contains current state, see STATE_XXX
dim curState : curState=STATE_INIT

//UART receive buffer
dim uartRecBuf$ : uartRecBuf$ = ""

//Contains the connection handle of the vsp connection
dim hVspConn : hVspConn = INVALID_CONN_HANDLE

//Idle timeout
dim idleTimeoutMs

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//##############################################################################
//#####                                                                    #####
//##### Customise behaviour using the callbacks that are provided in the   #####
//##### the "custom.low.power.vsp.uart.bridge.sb" as an example            #####
//#####                                                                    #####
//##############################################################################
//
#include "custom.low.power.vsp.uart.bridge.sb"
//
//##############################################################################

//------------------------------------------------------------------------------
// Change state
//------------------------------------------------------------------------------
sub NewState( nState )
  if nState != curState then
    #cmpif 0x00000004 : sprint #dbgmsg$, "NewState = "; nState
    #cmpif 0x00000004 : DbgMsg(dbgmsg$)
    curstate = nState
  endif
endsub

//------------------------------------------------------------------------------
// Close the uart if rx/tx buffers are empty
//------------------------------------------------------------------------------
function UartCloseConditional()
  dim fClosed : fClosed=0
  
  if UartInfo(0) then
    //Uart is open so try to close it if rx/tx ring buffers are empty
    rc=UartCloseEx(1)    
  endif
  
  if UartInfo(0) then
    //the uart is still open so restart the time
    TimerStart(STATE_TIMER,UART_IDLE_REPOLL_TIMEOUT_MS,0)
  else
    //closed, so configure the TX and RTS as outputs and adjust outputs
    rc=gpiosetfunc(UART_SIONUM_TX,2,1)   //TX - set high on default
      #cmpif 0x00000003 : AssertRC(rc, 3620)
    rc=gpiosetfunc(UART_SIONUM_RTS,2,UART_RTS_STATE_ON_CLOSE)   //Adjust RTS state on closure
      #cmpif 0x00000003 : AssertRC(rc, 3640)
    rc=GpioSetFunc(UART_SIONUM_RX,1,2)   //RX  - Pull high input & irq on hi2lo transition
      #cmpif 0x00000003 : AssertRC(rc, 3660)
    rc=GpioSetFunc(UART_SIONUM_CTS,1,1)   //CTS  - Pull low input & irq on lo2hi transition
      #cmpif 0x00000003 : AssertRC(rc, 3670)
    rc=GpioAssignEvent(UART_GPIO_ASSIGN_CHANNEL, UART_REOPEN_SIONUM, UART_REOPEN_STATE_CHANGE)
      #cmpif 0x00000003 : AssertRC(rc, 3680)
      
    fClosed = 1
    OnUartClose()  //Do your custom stuff in this function 
  endif  
endfunc fClosed

//------------------------------------------------------------------------------
// Reopen the uart and if it was closed
// unconditionally restarts the idle timer
//------------------------------------------------------------------------------
sub UartReOpen()
  if UartInfo(0)==0 then
    //Uart was actually closed  

    //Free up the level transition detection
    rc=GpioUnAssignEvent(UART_GPIO_ASSIGN_CHANNEL)
      #cmpif 0x00000003 : AssertRC(rc, 3840)
    //Open the uart
    rc=UartOpen(UART_BAUDRATE,UART_TX_BUFLEN,UART_RX_BUFLEN,"CN81H")
      #cmpif 0x00000003 : AssertRC(rc, 3870)
      
    if hVspConn == INVALID_CONN_HANDLE then
      OnUartOpen(0)  //Do your custom stuff in this function 
    else
      OnUartOpen(1)  //Do your custom stuff in this function 
    endif
          
  endif  
  
  //Start the uart inactivity timer
  TimerStart(STATE_TIMER,idleTimeoutMs,0)
endsub

//------------------------------------------------------------------------------
//if advertising then return non-zero
//------------------------------------------------------------------------------
function IsAdvertising()
  if (sysinfo(2016) & 0x1) then
    exitfunc 1
  endif
endfunc 0

//------------------------------------------------------------------------------
//if advertising in progress stop it
//------------------------------------------------------------------------------
sub AdvertsStop()
  #cmpif 0x00000004 : DbgMsg("Called AdvertsStop()")
  if IsAdvertising() then
    rc=BleAdvertStop()
    #cmpif 0x00000003 : AssertRC(rc, 4080)
    #cmpif 0x00000004 : DbgMsg("Adverts Stopped")
    OnAdvertStopped()  //Do your custom stuff in this function 
  endif
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub AdvertsStart()
  dim addr$
  addr$ = ""

  if IsAdvertising()==0 then
    rc = BleAdvertStart(ADVERT_TYPE, addr$, ADV_INTERVAL_MS, ADV_TIMEOUT_MS, 0)
      #cmpif 0x00000003 : AssertRC(rc, 4220)
      #cmpif 0x00000004 : DbgMsg("Vsp Adverts Started")
  endif
  OnAdvertStart()  //Do your custom stuff in this function 
endsub


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub InitGPIO()
  OnInitGpio()  //Do your custom stuff in this function 
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub InitGapService()
  dim dn$ : dn$=DEVICENAME
  rc=BleGapSvcInit(dn$, DEVICENAME_WRITABLE, APPEARANCE, MIN_CONN_INTERVALus, MAX_CONN_INTERVALus, CONN_SUP_TIMEOUTus, SLAVE_LATENCY)
    #cmpif 0x00000003 : AssertRC(rc, 4400)
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub InitAndConfigVsp()
  rc = BleVspOpen(VSP_TX_BUFLEN, VSP_RX_BUFLEN, 0, hVspUuid)
    #cmpif 0x00000003 : AssertRC(rc, 4470)
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub InitAndConfigAdv()
  dim advRpt$,scnRpt$
  rc = BleAdvRptInit(advRpt$, AD_FLAGS, APPEARANCE, MAX_DEVICENAME_LEN_IN_ADVERTS)
    #cmpif 0x00000003 : AssertRC(rc, 4550)
  
  rc = BleScanRptInit(scnRpt$) 
    #cmpif 0x00000003 : AssertRC(rc, 4580)
  
  rc = BleAdvRptAddUuid128(advRpt$, hVspUuid)
    #cmpif 0x00000003 : AssertRC(rc, 4610)
  
  rc = BleAdvRptsCommit(advRpt$, scnRpt$)
    #cmpif 0x00000003 : AssertRC(rc, 4640)
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub _OnConnect(hConn)
  dim intrvl,sprvto,slat
  
  hVspConn = hConn
  
  UartReOpen()
  
  NewState(STATE_CONN_UART_OPEN)
  
  OnAdvertStopped() //Do your custom stuff in this function 
  
  rc = BleGetCurConnParms(hConn,intrvl,sprvto,slat)
  
  OnConnect(hConn,intrvl,sprvto,slat)
  //Start the uart inactivity timer
  TimerStart(STATE_TIMER,idleTimeoutMs,0)
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub _OnConnParmChg(hConn)
  dim intrvl,sprvto,slat  
  rc = BleGetCurConnParms(hConn,intrvl,sprvto,slat)
  if rc==0 then  
    UartReOpen()
    OnConnParmChange(hConn,intrvl,sprvto,slat)
    //Start the uart inactivity timer
    TimerStart(STATE_TIMER,idleTimeoutMs,0)        
    //Change state - destination is same from both places
    NewState(STATE_CONN_UART_OPEN)    
  endif
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub StateTmrOnTimeout( nTmrExtMsec, nextState )
  if nTmrExtMsec<UART_IDLE_TIMEOUT_MS then
    nTmrExtMsec = UART_IDLE_TIMEOUT_MS
  endif
  TimerStart(STATE_TIMER,nTmrExtMsec,0)
  NewState(nextState)
endsub

//******************************************************************************
// Handler definitions
//******************************************************************************

//------------------------------------------------------------------------------
// State timer has expired
//------------------------------------------------------------------------------
function HndlrTmrState()
  dim nTmrExtMsec
  
  //If in the meantime the timer was restarted do nothing
  if TimerRunning(STATE_TIMER) == 0 then
    //timer was not restarted so action this
    select curState
    case STATE_IDLE_UART_OPEN
      //Start state timer
      nTmrExtMsec=OnUartClosing(0)
      StateTmrOnTimeout(nTmrExtMsec,STATE_IDLE_UART_CLOSE)

    case STATE_CONN_UART_OPEN
      //Start state timer
      nTmrExtMsec=OnUartClosing(1) 
      StateTmrOnTimeout(nTmrExtMsec,STATE_CONN_UART_CLOSE)
      
    case STATE_IDLE_UART_CLOSE,STATE_CONN_UART_CLOSE
      //the buffers have to empty and transmit register should be empty too
      if UartCloseConditional() then
        OnUartClose()
      endif
      //remain in the same state

    case else
    endselect
  endif
endfunc 1

//------------------------------------------------------------------------------
// Uart rx
//------------------------------------------------------------------------------
function HndlrUartRx()
  select curState
  case STATE_IDLE_UART_OPEN
    //Data received from UART when there is no connection
    dontcare = UARTReadN(uartRecBuf$, MAX_UART_READ_LEN)
    while dontcare
      OnUartRxNoConn(uartRecBuf$)
      StrShiftLeft(uartRecBuf$,dontcare)
      dontcare = UARTReadN(uartRecBuf$, MAX_UART_READ_LEN)
    endwhile
    
  case STATE_IDLE_UART_CLOSE
    UartReOpen()
    NewState(STATE_IDLE_UART_OPEN)
    //Data received from UART when there is no connection
    dontcare = UARTReadN(uartRecBuf$, MAX_UART_READ_LEN)
    while dontcare
      OnUartRxNoConn(uartRecBuf$)
      StrShiftLeft(uartRecBuf$,dontcare)
      dontcare = UARTReadN(uartRecBuf$, MAX_UART_READ_LEN)
    endwhile
    
  case STATE_CONN_UART_CLOSE
    UartReOpen()
    NewState(STATE_CONN_UART_OPEN)
    //Pass data between UART and VSP service
    BleVspUartBridge()
    
  case STATE_CONN_UART_OPEN
    //Pass data between UART and VSP service
    BleVspUartBridge()
    
  case else
  endselect
  
  //Start the uart inactivity timer
  TimerStart(STATE_TIMER,idleTimeoutMs,0)
endfunc 1

//------------------------------------------------------------------------------
// Vsp rx
//------------------------------------------------------------------------------
function HndlrVspRx()
  select curState
  case STATE_CONN_UART_CLOSE
    UartReOpen()
    NewState(STATE_CONN_UART_OPEN)
    //Pass data between UART and VSP service
    BleVspUartBridge()
    
  case STATE_CONN_UART_OPEN
    //Pass data between UART and VSP service
    BleVspUartBridge()
    
  case else
  endselect
  
  //Start the uart inactivity timer
  TimerStart(STATE_TIMER,idleTimeoutMs,0)
endfunc 1

//------------------------------------------------------------------------------
// Vsp tx empty
//------------------------------------------------------------------------------
function HndlrVspTxEmpty()
  select curState
  case STATE_CONN_UART_CLOSE
    UartReOpen()
    NewState(STATE_CONN_UART_OPEN)
    //Pass data between UART and VSP service
    BleVspUartBridge()
    
  case STATE_CONN_UART_OPEN
    //Pass data between UART and VSP service
    BleVspUartBridge()
    
  case else
  endselect
  
  //Start the uart inactivity timer
  TimerStart(STATE_TIMER,idleTimeoutMs,0)
endfunc 1

//------------------------------------------------------------------------------
//BLE message has arrived
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)
  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    _OnConnect(nCtx)

  case BLE_EVBLEMSGID_DISCONNECT
    //Disconnected see HndlrDisCon

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
    //There has been a change in the connection parameters
    _OnConnParmChg(nCtx)

  case else        
    #cmpif 0x00000004 : DbgMsgVal("Unprocessed nMsgId",nMsgId)
  endselect
endfunc 1

//------------------------------------------------------------------------------
//Disconnect
//------------------------------------------------------------------------------
function HndlrDisCon(hndl as integer, rsn as integer)
  #cmpif 0x00000004 : DbgMsg("Disconnect")

  UartReOpen()
  
  OnDisconnection(hndl) //Do your custom stuff in this function 

  hVspConn = INVALID_CONN_HANDLE

  NewState(STATE_IDLE_UART_OPEN)
  
  //Start Adverts
  AdvertsStart()
  
endfunc 1  

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function HndlrUartTxEmpty()
  select curState
  case STATE_IDLE_UART_CLOSE, STATE_CONN_UART_CLOSE
    //Start the uart inactivity timer
    TimerStart(STATE_TIMER,UART_MAX_CHARACTER_TIMEOUT_MS,0)
    //remain in this state
  
  case STATE_CONN_UART_OPEN
    //Pass data between UART and VSP service
    BleVspUartBridge()
    //Start the uart inactivity timer
    TimerStart(STATE_TIMER,idleTimeoutMs,0)
    
  case else
  endselect
endfunc 1

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function HndlrDetectPinRx()
  UartReOpen()
  
  select curState
  case STATE_IDLE_UART_CLOSE
    //Start the uart inactivity timer
    TimerStart(STATE_TIMER,idleTimeoutMs,0)
    NewState(STATE_IDLE_UART_OPEN)

  case STATE_CONN_UART_CLOSE
    //Start the uart inactivity timer
    TimerStart(STATE_TIMER,idleTimeoutMs,0)
    NewState(STATE_CONN_UART_OPEN)

  case else
  endselect
endfunc 1


//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Late global variables initialisation
//------------------------------------------------------------------------------
idleTimeoutMs = UART_IDLE_TIMEOUT_MS
#cmpif 0x0000FFFF : idleTimeoutMs = 60000   //If debug printing then make timeout a minute

//------------------------------------------------------------------------------
// Register event handlers
//------------------------------------------------------------------------------
OnEvent EVTMR0                  call HndlrTmrState
OnEvent EVBLEMSG                Call HndlrBleMsg
OnEvent EVDISCON                call HndlrDisCon
OnEvent EVUARTRX                Call HndlrUartRx
OnEvent EVUARTTXEMPTY           Call HndlrUartTxEmpty
onevent EVDETECTCHAN0           call HndlrDetectPinRx
onEvent EVVSPRX                 call HndlrVspRx
onEvent EVVSPTXEMPTY            call HndlrVspTxEmpty

//------------------------------------------------------------------------------
// startup
//------------------------------------------------------------------------------
//Close the uart
UartClose()
//Open the uart
rc=UartOpen(UART_BAUDRATE,UART_TX_BUFLEN,UART_RX_BUFLEN,"CN81H")
//Initialise the gpio
InitGPIO()
//Initialise and configure GAP service
InitGapService()
//Initialise and configure VSP
InitAndConfigVsp()
//Initialise and configure Adverts
InitAndConfigAdv()
//Start the uart inactivity timer
TimerStart(STATE_TIMER,idleTimeoutMs,0)

NewState(STATE_IDLE_UART_OPEN)
OnStartupDone()  //Do your custom stuff in this function
OnUartOpen(0) //Do your custom stuff in this function

//Start Adverts
AdvertsStart()

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
waitevent

