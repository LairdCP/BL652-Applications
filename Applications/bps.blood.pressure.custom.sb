// Copyright (c) 2013, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// Blood Pressure Profile
//
// Template Profile
//
//   When you run the app you will get a > command prompt to allow you to submit
//   commands as follows:-
//
//     initapp           - Initialise/start the app
//
//     sp nnnn           - Set systolic pressure as nnnn mmHg (decimal)
//     dp nnnn           - Set diastolic pressure as nnnn mmHg (decimal)
//     mp nnnn           - Set mean arterial pressure as nnnn mmHg (decimal)
//     pr nnnn           - Set pulse rate as nnnn beats per minute
//     ms nnnn           - Set measurement status as per bit mask BLE_BPS_MEAS_STAT_xxx
//     bf nnnn           - Set bp feature characteristic value 0..0xFFFF
//     id nnnn           - Set User ID in range 0 to 255
//     un nnnn           - Set units, 0 = mmHg, 1 = Pascal
//     dt yyyymmddhhmmss - Set date/time stamp - exactly 14 hex characters long
//     send              - Send data to peer
//
//     fg n              - Set advertising discoverability mode - n is 0 to 3 (see BLE_DISCOVERABILITY_xxx )
//     ai nnnn           - Set advertising interval in milliseconds
//     at nnnn           - Set advertising timeout in milliseconds
//     af n              - Set advertising filter policy 0..3 (see ADV_FILTERPOLICY_xx)
//     ma nnnnn..nnn     - Set mac address - 12 hex digits
//     ad n              - If n=0 then stop adverts otherwise start adverts if
//                            n=1 then ADV_IND
//                            n=2 then ADV_DIRECT_IND
//                            n=3 then ADV_SCAN_IND
//                            n=4 then ADV_NONCONN_IND
//
//     bl nn             - Set battery level to nn %
//
//     discon            - Disconnect
//     stop              - Exit app to command mode and can resume using RESUME command
//     quit              - Quit app to command mode
//     in nnnn           - Set min conn interval (us)
//     ix nnnn           - Set max conn interval (us)
//     st nnnn           - Set supervision timeout (us)
//     sl nnnn           - Set slave latency
//     negp              - Negotiate connection parameters
//
//     io n              - If n=0 then BLE_IOCAPABILITY_NONE
//                            n=1 then BLE_IOCAPABILITY_DISPLAY_YESNO
//                            n=2 then BLE_IOCAPABILITY_KEYBOARD_ONLY
//                            n=3 then BLE_IOCAPABILITY_DISPLAY_ONLY
//                            n=4 then BLE_IOCAPABILITY_KEYBOARD_DISPLAY
//     ky nnnn           - Set pairing passcode (decimal)
//     kn nn             - Minimum size of ltk
//     kx nn             - Maximum size of ltk
//     setkey            - Commit min and max ltk key size
//
//     db nn             - Display debug info associated with nn
//
//     dr aaaaaa         - GAP - set device name with read only
//     dw aaaaaa         - GAP - set device name with read/write capability only
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************

        //This defines how the application startsup and is a bit mask.
        //Bit 0 == 1 then OnStartup() is called just before waitevent
        //Bit 1 == 1 then StartAds() is called just before waitevent
#define AUTO_STARTUP                                3

        //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                         1

#define DEVICENAME                                  "LAIRD_BP"
#define DEVICENAME_WRITABLE                         1
#define APPEARANCE                                  BLE_APPEARANCE_GENERIC_BLOOD_PRESSURE
#define MANF_NAME                                   "Laird Connectivity"
#define MODELSTR                                    "BL652"
#define SERIALNUM                                   "12345"
#define HWREV                                       "HwRev1.0"
#define SWREV                                       "SwRev1.0"
#define SYSID                                       "\01\02\03\04\05\06\07\08"
//#define SYSID                                       "@"
//#define REGLIST                                     "\DE\AD\C0\DE"
#define REGLIST                                     ""
//#define PNPID                                       "\01\04\BF\03\20\00\01"
#define PNPID                                       ""
#define CHAR_CR                                     13

        //Minimum acceptable connection interval (0.5 seconds)
#define MIN_CONN_INTERVAL                           80000
        //Maximum acceptable connection interval (1 second).
#define MAX_CONN_INTERVAL                           100000
        //Slave latency -- number of conn events that can be missed
        //Effective Conn interval will be (SLAVE_LATENCY+1)*ACTUAL_CONN_INTERVAL
#define SLAVE_LATENCY                               1
        //Connection supervisory timeout (4 seconds) - max 32 seconds
#define CONN_SUP_TIMEOUT                            4000000
        //DiscoverableMode, set to BLE_DISCOVERABILITY_xxx
#define DISCOVERY_MODE                              BLE_DISCOVERABILITY_GENERAL
#define MAX_DEVNAME_CHRS                            10
        //Set Appearance advertise 0 to suppress
#define ADV_APPEARANCE                              1
        //Advertise interval
#define ADV_INTERVAL_MS                             100
        //Advertise timeout
#define ADV_TIMEOUT_MS                              300000

        //Whitelist Policy in Adverts
#define ADV_WHITELIST_FILTER_POLICY                 ADV_FILTERPOLICY_ANY

        //Minimum long term key size in octets
#define MIN_LTK_SIZE                                8
        //Maximum long term key size in octets
#define MAX_LTK_SIZE                                16

        //Set this to non-zero to enable notify on batt service
#define BATT_NOTIFY                                 0
#define BATT_INIT_LEVEL_PERC                        100

        //This sets the pairing i/o capability using bonding
#define PAIRING_IOCAPABILITY                        BLE_IOCAPABILITY_NONE

        //Connection Update Negotiation paramters
#define FIRST_CONN_PARAMS_UPDATE_DELAY              5000
#define NEXT_CONN_PARAMS_UPDATE_DELAY               5000
#define MAX_CONN_PARAMS_UPDATE_DELAY                15000

        //Maximum length of BP characteristics
#define MAX_BPM_LEN                                 20

#define BLE_CONN_HANDLE_INVALID                     0xFFFF
#define BLE_INVALID_UUID_HANDLE                     0
#define BLE_INVALID_CHAR_HANDLE                     0
#define BLE_INVALID_SERVICE_HANDLE                  0
#define CIRCBUFFER_INVALID_HANDLE                   -1

//Set BLE_DISCOVERABILITY_NONE if whitelist is enabled in BleAdvertStart()
//as the 4.0 spec says if whitelist is enabled then discoverability is not allowed
#define BLE_DISCOVERABILITY_NONE                    0
#define BLE_DISCOVERABILITY_LIMITED                 1
#define BLE_DISCOVERABILITY_GENERAL                 2
#define BLE_DISCOVERABILITY_BOTH                    3

#define BLE_APPEARANCE_UNKNOWN                      0
#define BLE_APPEARANCE_GENERIC_PHONE                64
#define BLE_APPEARANCE_GENERIC_COMPUTER             128
#define BLE_APPEARANCE_GENERIC_WATCH                192
#define BLE_APPEARANCE_WATCH_SPORTS_WATCH           193
#define BLE_APPEARANCE_GENERIC_DISPLAY              320
#define BLE_APPEARANCE_GENERIC_EYE_GLASSES          448
#define BLE_APPEARANCE_GENERIC_TAG                  512
#define BLE_APPEARANCE_GENERIC_KEYRING              576
#define BLE_APPEARANCE_GENERIC_MEDIA_PLAYER         640
#define BLE_APPEARANCE_GENERIC_BLOOD_PRESSURE       896
#define BLE_APPEARANCE_BLOOD_PRESSURE_ARM           897
#define BLE_APPEARANCE_BLOOD_PRESSURE_WRIST         898

#define UUID_BATTERY_SERVICE                        0x180F
#define UUID_BLOOD_PRESSURE_SERVICE                 0x1810
#define UUID_DEVICE_INFORMATION_SERVICE             0x180A

#define BLE_SERVICE_SECONDARY                       0
#define BLE_SERVICE_PRIMARY                         1

#define BLE_CHAR_METADATA_ATTR_NOT_PRESENT          0

#define BLE_ATTR_ACCESS_NONE                        0
#define BLE_ATTR_ACCESS_OPEN                        1
#define BLE_ATTR_ACCESS_ENC_NO_MITM                 2
#define BLE_ATTR_ACCESS_ENC_WITH_MITM               3
#define BLE_ATTR_ACCESS_SIGNED_NO_MITM              4
#define BLE_ATTR_ACCESS_SIGNED_WITH_MITM            5

#define BLE_CHAR_PROPERTIES_BROADCAST               0x01
#define BLE_CHAR_PROPERTIES_READ                    0x02
#define BLE_CHAR_PROPERTIES_WRITE_WO_RESPONSE       0x04
#define BLE_CHAR_PROPERTIES_WRITE                   0x08
#define BLE_CHAR_PROPERTIES_NOTIFY                  0x10
#define BLE_CHAR_PROPERTIES_INDICATE                0x20
#define BLE_CHAR_PROPERTIES_AUTH_SIGNED_WR          0x40
#define BLE_CHAR_PROPERTIES_RELIABLE_WRITE          0x80

//Types of advert packets
#define ADV_IND                                     0
#define ADV_DIRECT_IND                              1
#define ADV_SCAN_IND                                2
#define ADV_NONCONN_IND                             3

//Types of filter policy
#define ADV_FILTERPOLICY_ANY                        0
#define ADV_FILTERPOLICY_SCANREQ                    1
#define ADV_FILTERPOLICY_CONNREQ                    2
#define ADV_FILTERPOLICY_BOTH                       3

//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                      0   //msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                   1   //msgCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR                4   //msgCtx = resultcode
#define BLE_EVBLEMSGID_BPS_INDICATION_STATE         7   //msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_BPS_INDICATION_CNF           8   //msgCtx = not used
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY              9   //msgCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                     10  //msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST             11  //msgCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE            14  //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL       15  //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER        16  //msgCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND                 17  //msgCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                    18  //msgCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING        19  //msgCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED                  20  //msgCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE             21  //msgCtx = connection handle 

//Blood Pressure Feature Bits
#define BLE_BPS_FEATURE_BODY_MOVEMENT_BIT           1
#define BLE_BPS_FEATURE_CUFF_FIT_BIT                2
#define BLE_BPS_FEATURE_IRREGULAR_PULSE_BIT         4
#define BLE_BPS_FEATURE_PULSE_RATE_RANGE_BIT        8
#define BLE_BPS_FEATURE_MEASUREMENT_POSITION_BIT    16
#define BLE_BPS_FEATURE_MULTIPLE_BOND_BIT           32

//Blood Pressure Measurement Status flags
#define BLE_BPS_MEAS_STAT_BODY_MOVEMENT             1
#define BLE_BPS_MEAS_STAT_CUFF_FIT                  2
#define BLE_BPS_MEAS_STAT_IRREGULAR_PULSE           4
#define BLE_BPS_MEAS_STAT_PULSE_RATE_RANGE          8
#define BLE_BPS_MEAS_STAT_MEASUREMENT_POSITION      16

//Pairing i/o capability
#define BLE_IOCAPABILITY_NONE                       0
#define BLE_IOCAPABILITY_DISPLAY_YESNO              1
#define BLE_IOCAPABILITY_KEYBOARD_ONLY              2
#define BLE_IOCAPABILITY_DISPLAY_ONLY               3
#define BLE_IOCAPABILITY_KEYBOARD_DISPLAY           4
#define BLE_IOCAPABILITY_ILLEGAL                    5

//HCI Status Codes
#define BLE_HCI_AUTHENTICATION_FAILURE              0x05
#define BLE_HCI_CONNECTION_TIMEOUT                  0x08

//Some Useful Result Codes to help with documentation
#define RESCODE_BLE_SVC_REGISTERED                  0x6018

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//==============================================================================
//==============================================================================
sub AssertRC(byval rc as integer,byval tag as integer)
  if (ENABLE_DEBUG_PRINTS!=0) && (rc!=0) then
    print "Failed with ";integer.h' rc;" at tag ";tag;"\n"
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print msg$;"\n"
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsgVal(byval msg$ as string, byval vl as integer)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print msg$;" ";vl;"\n"
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgPrnAdvReport(byref rp$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "Rpt=";strhexize$(rp$);"\n"
  endif
endsub

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim advState                //Will be 0 if not advertising, 1,2,3,4 for the four advert types
dim advType                 //As per ADV_ in ble.sblib
dim addr$                   //Peer address for Directed Adverts (MSB first) and exactly 6 bytes long
dim advInt                  //Adv interval in milliseconds
dim advTmout                //Adv timeout in milliseconds
dim advFilPol               //Adv filter policy - see ADV_FILTERPOLICY_xxx in blelib.sblib
                            // 0 = Any
                            // 1 = Filter Scan Request
                            // 2 = Filter Connection Request
                            // 3 = Both

dim adRpt$ as string        //Contains the most recent Advertise report
dim scRpt$ as string        //Contains the most recent scan report
dim advUuid[6]              //These are the uuid's that are exposed
dim advUuidCnt              //Uuid Counts for advert report

dim minint                  //Minimum interval range is 7500us to 4000000us
dim maxint                  //Minimum interval range is 7500us to 4000000us
dim sprtout                 //Link supervision timeout max value 32000000us
dim slatncy                 //Slave latency 0..N where N*Interval must be less than link
                            //Supervision timeout
dim hConn                   //Connection handle

dim shBat as integer
dim chBatlvl as integer
dim batlvl$ as string

dim shBps as integer        //Service handle
dim chBpsMeas as integer    //Blood Pressure Measurement Characteristic Handle
dim chBpsFtr as integer     //Blood Pressure Feature Characteristic Handle

dim indState                //Indication state 0 = off, 1 = on
dim indwait                 //0 means not waiting for an indication confirm
dim dateTime$ as string     //Date Time string -- must be 0 or 7 bytes long

dim sysPressure             //Systolic pressure
dim diasPressure            //Diastolic pressure
dim meanPressure            //Mean Arterial Pressure
dim nMeasStatus             //Measurement Status see BLE_BPS_MEAS_STAT_xxx
dim nPulseRate              //Pulse Rate - beats per minute
dim bpFeature               //BP feature characteristic value 0..0xFFFF
dim nUserId                 //BP user id 0..255
dim units                   //0 for mmHg and 1 for Pascal

dim bps$ as string          //Blood pressure measurement attribute

dim stRsp$ as string        //Uart rx data is stored here
dim ok$,er$
dim msg$
dim mnltk                   //Min size of ltk
dim mxltk                   //Max size of ltk
dim advFlags                //Value for flags AD

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************

advState = 0
advType  = ADV_IND
addr$ = ""
advInt   = ADV_INTERVAL_MS
advTmout = ADV_TIMEOUT_MS
advFilPol= ADV_WHITELIST_FILTER_POLICY

adRpt$=""
scRpt$=""

//Initialise the uuid array list with -1 which will be taken as item not to
//to be included in the advert report for the uuid AD element.
for advUuidCnt=0 to 5
  advUuid[advUuidCnt]=-1
next
advUuidCnt = 0


hConn   = BLE_CONN_HANDLE_INVALID
minint  = MIN_CONN_INTERVAL
maxint  = MAX_CONN_INTERVAL
sprtout = CONN_SUP_TIMEOUT
slatncy = SLAVE_LATENCY


shBat = 0
chBatlvl = 0
batlvl$ ="\64"


sysPressure     = 0
diasPressure    = 0
meanPressure    = 0
nPulseRate      = 0
nMeasStatus     = 0
dateTime$       = ""
nUserId         = 254      //Don't care
bpFeature       = BLE_BPS_FEATURE_BODY_MOVEMENT_BIT + BLE_BPS_FEATURE_MEASUREMENT_POSITION_BIT
units           = 0        //mmHg

ok$      = "\nOK\r\n>"
er$      = "\nERROR\r\n>"

mnltk    = MIN_LTK_SIZE
mxltk    = MAX_LTK_SIZE
advFlags = DISCOVERY_MODE  //Can be changed via 'fg' command

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
// Returns 0 if parameters are acceptable
//==============================================================================
function SetAdvertType(byval adType as integer,byref ad$ as string) as integer
  if (adType>=ADV_IND)&&(adType<=ADV_NONCONN_IND) then
    if (adType==ADV_DIRECT_IND) then
      if (strlen(ad$)!=6)  then
        exitfunc 0
      endif
      addr$=ad$
    endif
    advType = adType
    exitfunc 1
  endif
endfunc 0

//==============================================================================
//==============================================================================
function GetAdvertState() as integer
endfunc advState

//==============================================================================
//==============================================================================
function SetAdvertInt(intvl as integer) as integer
  if intvl < 20 then
    exitfunc 0
  endif
  if advType >= ADV_SCAN_IND then
    if intvl < 100 then
      exitfunc 0
    endif
  endif
  advInt = intvl
endfunc 1

//==============================================================================
//==============================================================================
function SetAdvertTout(inttm as integer) as integer
  if inttm < (advInt+20) then
    exitfunc 0
  endif
  advTmout = inttm
endfunc 1

//==============================================================================
//==============================================================================
function SetPeerAddr(ad$ as string) as integer
  ad$=StrDehexize$(ad$)
  if strlen(ad$) != 7 then
    exitfunc 5
  endif
  addr$=ad$
endfunc 0

//==============================================================================
//==============================================================================
function SetAdvertFPol(fpol as integer) as integer
  if (fpol >= ADV_FILTERPOLICY_ANY)&&(fpol <= ADV_FILTERPOLICY_BOTH)then
    advFilPol = fpol
    exitfunc 1
  endif
endfunc 0

//==============================================================================
// Returns 0 if successful, otherwise appropriate error code
//==============================================================================
function StopAdverts() as integer
  dim rc
  rc=0
  if advState != 0 then
    //Currently advertising
    rc = BleAdvertStop()
    AssertRC(rc, 491)
    if rc==0 then
      //Adverts stopped successfully
      advState=0
    endif
  endif
endfunc rc

//==============================================================================
// -1 for the last valid type of advert that was sent
//  0 ADV_IND
//  1 ADV_DIRECT_IND
//  2 ADV_SCAN_IND
//  3 ADV_NONCONN_IND
//
// Returns 0 if successful, otherwise appropriate error code
//==============================================================================
function StartAdverts(adv as integer) as integer
  dim rc
  if advState == 0 then
    //Currently not advertising
    if adv == -1 then
      adv = advType
    elseif (adv<0)||(adv>3) then
      //Invalid advertising type
      rc=0xEF01
      AssertRC(rc, 517)
      exitfunc rc
    endif
    rc = BleAdvertStart(adv,addr$,advInt,advTmout,advFilPol)
    AssertRC(rc, 521)
    //
    //Warning: If you get an error here it is most likely that you
    //         have limited discoverability and the advert timeout is > 180000
    //
    if rc==0 then
      //Adverts started successfully
      advType = adv
      advState = advType + 1
    endif
  else
    //Currently advertising
    rc=0xEF00
    AssertRC(rc, 534)
  endif
endfunc rc


//==============================================================================
// MUST be called from the BLE message handler
//==============================================================================
sub AdvMngrOnBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER)
  dim rc

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    advState=0

  case BLE_EVBLEMSGID_DISCONNECT
    //Restart advertising
    rc=StartAdverts(-1)
    AssertRC(rc, 552)

  case else
    //Do nothing
  endselect

endsub

//==============================================================================
// Will return 0 if no longer advertising
//==============================================================================
function AdvMngrOnAdvTimeOut() as integer
  advState = 0
endfunc advState

//==============================================================================
// Will add to array if there is space
//==============================================================================
sub AddUuid(nUuid as integer)
  if advUuidCnt < 5 then
    advUuid[advUuidCnt]=nUuid
    advUuidCnt = advUuidCnt + 1
  endif
endsub

//==============================================================================
// advFlags = Flags for Advert Report
//==============================================================================
sub InitAdvReports(advFlags as integer)
  dim rc

  adRpt$=""
  scRpt$=""

  //If whitelist filter policy is enabled and there is at least one master
  //in the bonding manager, then need to reset the advFlags so that
  //discoverability is disabled
  if advFilPol != ADV_FILTERPOLICY_ANY then
    //Filter policy has been enabled
    if sysinfo(2009) != 0 then
      //There is at least one master in the trusted device database
      advFlags = advFlags & 0xFFFFFFFC
    endif
  endif

  //Create a minimal advertise report
  rc = BleAdvRptInit(adRpt$,advFlags,ADV_APPEARANCE,MAX_DEVNAME_CHRS)
  AssertRC(rc, 599)

  //Append the uuid list to the advert report
  rc = BleAdvRptAddUuid16(adRpt$,advUuid[0],advUuid[1],advUuid[2],advUuid[3],advUuid[4],advUuid[5])
  AssertRC(rc, 603)

  //Initialise an empty scan report
  rc = BleScanRptInit(scRpt$)
  AssertRC(rc, 607)

  //Commit the advert and scan report to the scan
  rc = BleAdvRptsCommit(adRpt$,scRpt$)
  AssertRC(rc, 611)

endsub

//==============================================================================
//==============================================================================
function ScanReportInit()
  dim rc
  rc = BleScanRptInit(scRpt$)
  AssertRC(rc, 620)
endfunc rc

//==============================================================================
//==============================================================================
function ScanReportAppend(nTag as integer, byref adData$ as string)
  dim rc
  rc = BleAdvRptAppendAD(scRpt$,nTag,adData$)
  AssertRC(rc, 628)
endfunc rc

//==============================================================================
//==============================================================================
function ScanReportCommit()
  dim rc,rpt$
  rpt$=""
  rc = BleAdvRptsCommit(rpt$,scRpt$)
  AssertRC(rc, 637)
endfunc rc

//==============================================================================
// hc is the handle of the connection to be dropped
//==============================================================================
function Disconnect(hc as integer) as integer
  dim rc
  rc = BleDisconnect(hc)
  AssertRC(rc, 646)
endfunc rc

//==============================================================================
// hc is the handle of the connection to be dropped
//==============================================================================
function ConnNewParms(hc as integer) as integer
  dim rc
  rc = BleSetCurConnParms(hc,minint,maxint,sprtout,slatncy)
  AssertRC(rc, 655)
endfunc rc


//==============================================================================
// MUST be called from the BLE message handler
//==============================================================================
sub ConnMngrOnBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER)
  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    hConn = nCtx

  case BLE_EVBLEMSGID_DISCONNECT
    hConn = BLE_CONN_HANDLE_INVALID

  case else
    //Do nothing
  endselect
endsub

//==============================================================================
//==============================================================================
function SecSendPassKey(hc as integer, byval ky as integer) as integer
  dim rc
  if hc != BLE_CONN_HANDLE_INVALID then
    rc = BleSecMngrPassKey(hc,ky)
    AssertRC(rc, 681)
  endif
endfunc rc

//==============================================================================
//==============================================================================
function SecSetIoCap(ioCap as integer) as integer
  dim rc
  rc = BleSecMngrIocap(iocap)
  AssertRC(rc, 690)
endfunc rc

//==============================================================================
//==============================================================================
function SecSetLtkSizeRange(mnLtk as integer, mxLtk as integer) as integer
  dim rc
  rc = BleSecMngrKeySizes(mnLtk,mxLtk)
  AssertRC(rc, 698)
endfunc rc

//==============================================================================
//==============================================================================
sub InitSecurityMngr(ioCap as integer,mnLtk as integer, mxLtk as integer)
  dim rc
  rc = SecSetIoCap(ioCap)
  rc = SecSetLtkSizeRange(mnLtk,mxLtk)
endsub

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
sub InitGapService()
  dim rc
  rc = BleGapSvcInit(DEVICENAME,DEVICENAME_WRITABLE,APPEARANCE,MIN_CONN_INTERVAL,MAX_CONN_INTERVAL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
  AssertRC(rc, 718)
endsub

//==============================================================================
//==============================================================================
sub InitDisService()
  dim mf$,md$,sy$,rl$
  dim rc

  mf$=MANF_NAME
  md$=MODELSTR
  rl$=REGLIST
  sy$=SYSID
  rc = BleSvcRegDevInfo(mf$,md$,SERIALNUM,HWREV,SWREV,sy$,rl$,PNPID)

  if (rc==0) || (rc==RESCODE_BLE_SVC_REGISTERED) then
     AddUuid(UUID_DEVICE_INFORMATION_SERVICE)
  else
    AssertRC(rc, 736)
  endif

endsub

//==============================================================================
//==============================================================================
function AddCharBatLevel(byval btlvl as integer, byval fNfy as integer) as integer
  dim rc

  if btLvl < 0 then
    btLvl = 0
  elseif btLvl > 100 then
    btLvl = 100
  endif

  //Create the Battery Level Characteristic which has a UUID of 0x2A19
  dim mdAttr
  dim mdCccd
  dim mdSccd
  dim chProp 
  dim format : format = 0x04            //uint8 - Unsigned 8-bit integer
  dim exponent : exponent = 0
  dim unit : unit = 0x27AD              //Percentage
  dim namespace : namespace = 0x01      //Bluetooth SIG
  dim namespacedesc : namespacedesc = 0

  //++++
  //Create the metadata for the value attribure in the characteristic
  //++++
  mdAttr=BleAttrMetadata(BLE_ATTR_ACCESS_OPEN,BLE_ATTR_ACCESS_NONE,1,0,rc)
  AssertRC(rc, 767)
  //There is no CCCD in this characteristic
  mdCccd = BleAttrMetadata(BLE_ATTR_ACCESS_OPEN,BLE_ATTR_ACCESS_OPEN,1,0,rc)
  AssertRC(rc, 770)
  //There is no SCCD in this characteristic
  mdSccd = BLE_CHAR_METADATA_ATTR_NOT_PRESENT
  //Create the Characteristic object
  chProp = BLE_CHAR_PROPERTIES_READ | BLE_CHAR_PROPERTIES_NOTIFY
  rc = BleCharNew(chProp,BleHandleUuid16(0x2A19),mdAttr,mdCccd,mdSccd)
  AssertRC(rc, 776)

  //++++
  //Add the PRESENTATION FORMAT Descriptor
  //++++
  rc = BleCharDescPrstnFrmt(format,exponent,unit,namespace,namespacedesc)
  AssertRC(rc, 782)

  //++++
  //Commit the characteristic
  //++++
  rc = BleEncode8(batlvl$,btlvl,0)
  rc = BleCharCommit(shBat,batlvl$,chBatlvl)
  AssertRC(rc, 789)

endfunc rc


//==============================================================================
//==============================================================================
function RegBatService(byval btlvl as integer, byval fNfy as integer) as integer
  dim rc

  //Create a battery PRIMARY service attribute which has a uuid of 0x180F
  rc = BleServiceNew(BLE_SERVICE_PRIMARY,BleHandleUuid16(0x180F),shBat)
  AssertRC(rc, 801)

  //Create the Battery Level Characteristic which has a UUID of 0x2A19
  rc = AddCharBatLevel(btlvl,fNfy)
  AssertRC(rc, 805)
  
  //Commit battery service to GATT table
  rc=BleServiceCommit(shBat)
  AssertRC(rc, 809)

endfunc rc


//==============================================================================
//==============================================================================
sub InitBatService(byval batlvl as integer, byval fNfy as integer)
  dim rc

  rc = RegBatService(batlvl,fNfy)
  if rc==0 then
     AddUuid(UUID_BATTERY_SERVICE)
  endif

endsub


//==============================================================================
//==============================================================================
function VerifyBattLevel(battLvl)
  if battLvl < 0 then
    battLvl = 0
  elseif battLvl > 100 then
    battLvl = 100
  endif
endfunc battLvl  


//==============================================================================
//==============================================================================
function SetBattLevel(btLvl as integer) as integer
  dim rc

  btLvl = VerifyBattLevel(btLvl)

  rc = BleEncode8(batlvl$,btlvl,0)
  rc = BleCharValueWrite(chBatlvl,batlvl$)
  AssertRC(rc, 847)

endfunc rc


//==============================================================================
//==============================================================================
function NotifyBattLevel(btLvl as integer) as integer
  dim rc

  btLvl = VerifyBattLevel(btLvl)

  rc = BleEncode8(batlvl$,btlvl,0)
  rc = BleCharValueNotify(chBatlvl,batlvl$)
  AssertRC(rc, 861)

endfunc rc

//==============================================================================
// Data to encode is in sysPressure,diasPressure,meanPressure,nPulseRate,
//                      nMeasStatus,dateTime$,nUserId,units
//==============================================================================
sub BpsEncode()
  dim rc
  dim encsz
  dim flgs
  dim ndx

  //Initialise the flags byte
  encsz = 12      //Flag(1) + Systolic(2) + Diastolic(2) + MeanArtPress(2) + Pulse(2)
                  // + userid(1) + measStat(2)
  flgs  = b'11100 //The Pulse,Userid,MeasStat is always included

  //Update mmHg or Pascal bit in Flags
  if units then
    //Units in Pascal
    flgs  = flgs | b'1
  endif

  //Update if datetime present
  if strlen(dateTime$) then
    flgs  = flgs | b'10
    encsz = encsz + 7  //Encoded datetime is 7 bytes long
  endif

  //Create the attribute buffer space
  rc= StrFill(bps$,0,encsz)
  //Save the flags field
  rc = BleEncode8(bps$,flgs,0)
  //Save the Systolic Pressure
  rc = BleEncodeSFLOATEX(bps$,sysPressure,1)
  //Save the Diastolic Pressure
  rc = BleEncodeSFLOATEX(bps$,diasPressure,3)
  //Save the Mean Arterial Pressure
  rc = BleEncodeSFLOATEX(bps$,meanPressure,5)
  ndx = 7
  //Save the date time stamp if exists
  if flgs & b'10 then
    rc = BleEncodeTimeStamp(bps$,dateTime$,ndx)
    ndx = ndx+7
  endif
  //Save the pulse rate
  rc = BleEncodeSFLOATEX(bps$,nPulseRate,ndx)
  ndx = ndx+2
  //Save User Id
  rc = BleEncode8(bps$,nUserId,ndx)
  ndx = ndx+1
  //Save the measurement status
  rc = BleEncode16(bps$,nMeasStatus,ndx)

endsub

//==============================================================================
//==============================================================================
function AddCharBpsMeas() as integer
  dim rc

  //----------------------------------------------------------------------------
  // Create the Blood Pressure Measurement Characteristic which has a UUID of 0x2A35
  //----------------------------------------------------------------------------
  dim mdAttr
  dim mdCccd
  dim mdSccd
  dim chProp
  //dim attr$

  //++++
  //Create the metadata for the value attribute in the characteristic
  //Heart Rate attribute has variable length
  //++++
  mdAttr=BleAttrMetadata(BLE_ATTR_ACCESS_NONE,BLE_ATTR_ACCESS_NONE,MAX_BPM_LEN,1,rc)
  AssertRC(rc, 938)
  //There is a CCCD in this characteristic
  mdCccd=BleAttrMetadata(BLE_ATTR_ACCESS_OPEN,BLE_ATTR_ACCESS_ENC_NO_MITM,2,0,rc)
  AssertRC(rc, 941)
  //There is no SCCD in this characteristic
  mdSccd = BLE_CHAR_METADATA_ATTR_NOT_PRESENT
  //AssertRC(rc, 944)
  //Create the Characteristic object
  chProp = BLE_CHAR_PROPERTIES_INDICATE
  rc = BleCharNew(chProp,BleHandleUuid16(0x2A35),mdAttr,mdCccd,mdSccd)
  AssertRC(rc, 948)

  //++++
  //Commit the characteristic
  //++++
  BpsEncode()
  rc = BleCharCommit(shBps,bps$,chBpsMeas)
  AssertRC(rc, 955)

endfunc rc

//==============================================================================
//==============================================================================
function AddCharBpsFeature() as integer
  dim rc

  // Create the Blood Pressure Feature Characteristic which has a UUID of 0x2A49
  dim mdAttr
  dim mdCccd
  dim mdSccd
  dim chProp
  dim attr$

  //++++
  //Create the metadata for the value attribute in the characteristic
  //Heart Rate attribute has variable length
  //++++
  mdAttr=BleAttrMetadata(BLE_ATTR_ACCESS_OPEN,BLE_ATTR_ACCESS_NONE,2,0,rc)
  AssertRC(rc, 976)
  //There is no CCCD in this characteristic
  mdCccd=BLE_CHAR_METADATA_ATTR_NOT_PRESENT
  //AssertRC(rc, 979)
  //There is no SCCD in this characteristic
  mdSccd = BLE_CHAR_METADATA_ATTR_NOT_PRESENT
  //AssertRC(rc, 982)
  //Create the Characteristic object
  chProp = BLE_CHAR_PROPERTIES_READ
  rc = BleCharNew(chProp,BleHandleUuid16(0x2A49),mdAttr,mdCccd,mdSccd)
  AssertRC(rc, 986)

  //++++
  //Commit the characteristic
  //++++
  attr$="\00\00"
  rc = BleEncode16(attr$,bpFeature,0)
  rc = BleCharCommit(shBps,attr$,chBpsFtr)
  AssertRC(rc, 994)

endfunc rc

//==============================================================================
//==============================================================================
function RegBpsService() as integer
  dim rc

  //Create a Health Thermometer PRIMARY service attribure which has a uuid of 0x1810
  rc = BleServiceNew(BLE_SERVICE_PRIMARY,BleHandleUuid16(0x1810),shBps)
  AssertRC(rc, 1005)

  //Create the Blood Pressure Measurement Characteristic which has a UUID of 0x2A35
  rc = AddCharBpsMeas()
  AssertRC(rc, 1009)

  //Create the Blood Pressure Feature Characteristic which has a UUID of 0x2A49
  rc = AddCharBpsFeature()
  AssertRC(rc, 1013)
  
  //Commit Health Thermometer service to GATT table
  rc=BleServiceCommit(shBps)
  AssertRC(rc, 1017)

endfunc rc

//==============================================================================
//==============================================================================
sub InitBpsService()
  dim rc
  rc = RegBpsService()
  AssertRC(rc, 1026)
  if rc==0 then
     AddUuid(UUID_BLOOD_PRESSURE_SERVICE)
  endif

endsub


//==============================================================================
// will return 0 if successfully sent
//==============================================================================
function SendBpData() as integer
  dim rc
  rc = 1
  if indwait == 0 then
    BpsEncode()
//print "\nbps_attr=";strhexize$(bps$);"\n"
    rc = BleCharValueIndicate(chBpsMeas,bps$)
    AssertRC(rc, 1044)
    if rc == 0 then
      indwait = 1
    endif
  endif
endfunc rc


//==============================================================================
// MUST be called from the CHARHVC message handler
//==============================================================================
sub BpsOnCharHvc()
  indwait = 0
endsub


//==============================================================================
// MUST be called from the CHARCCCD message handler
//==============================================================================
sub BpsOnCharCccd(BYVAL nVal AS INTEGER)
  indState = nVal
endsub

//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//==============================================================================
//==============================================================================
sub DbgInfo(id as integer)
  select id
  case 0
    DbgPrnAdvReport(adRpt$)
  case 1
    DbgPrnAdvReport(scRpt$)

  case else
  endselect
endsub

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
// This is called to start things off just before the waitevent at the end of
// the file
//==============================================================================
sub OnStartup()

  InitSecurityMngr(PAIRING_IOCAPABILITY,MIN_LTK_SIZE, MAX_LTK_SIZE)

  //Initialise services
  InitGapService()
  InitDisService()
  InitBatService(BATT_INIT_LEVEL_PERC,BATT_NOTIFY)  //2nd parameter will be allowed to be 1 in future
  InitBpsService()

  //Initiliase advert and scan reports
  InitAdvReports(advFlags)

endsub


//==============================================================================
//==============================================================================
sub UartRsp(rsp as integer)
  dim rc
  if rsp == 0 then
    rc = UartWrite(ok$)
  else
    rc = UartWrite(er$)
  endif
endsub

//==============================================================================
//==============================================================================
sub UartMsg(byref msg$ as string)
  dim rc
  rc = UartWrite(msg$)
endsub


//==============================================================================
//==============================================================================
function StartAds(adv as integer) as integer
  dim rc
  rc=StartAdverts(adv)
  if rc==0 then
    DbgMsgVal("Start Adverts",adv)
  endif
endfunc rc

//==============================================================================
//==============================================================================
function StopAds() as integer
  dim rc
  rc=StopAdverts()
  if rc==0 then
    DbgMsg("Stop Adverts")
  endif
endfunc rc

//==============================================================================
//==============================================================================
function IsValidDateTime() as integer
  dim ln
  ln=strlen(dateTime$)
  if (ln==0) || (ln==7) then
    exitfunc 0
  endif
  dateTime$=""  //Invalid so clear it
endfunc 1

//==============================================================================
//==============================================================================
sub SetDeviceName(st$ as string,wr as integer)
  dim rc
  rc = BleGapSvcInit(st$,wr,APPEARANCE,MIN_CONN_INTERVAL,MAX_CONN_INTERVAL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
  AssertRC(rc, 1163)
  InitAdvReports(advFlags)
endsub

//==============================================================================
//==============================================================================
function SaveMacAddr(byref ad$ as string) as integer
  dim vl
  vl=strlen(ad$)
  if vl==7 then
    addr$ = ad$
    exitfunc 0
  endif
endfunc 1

//==============================================================================
//==============================================================================
function ProcAdvCmd(vl as integer) as integer
  dim rc
  if vl==0 then
    rc= StopAds()
  else
    vl=vl-1
    rc= StartAds(vl)
  endif
endfunc rc

//==============================================================================
//==============================================================================
sub ShowConnParms(nCtx as integer)
  dim rc
  dim intrvl,sprvto,slat
  rc= BleGetCurConnParms(nCtx,intrvl,sprvto,slat)
  AssertRC(rc, 1196)
  if rc==0 then
    DbgMsgVal("Conn Interval",intrvl)
    DbgMsgVal("Conn Supervision Timeout",sprvto)
    DbgMsgVal("Conn Slave Latency",slat)
  endif
endsub


//==============================================================================
// Expecting to see XX=nnn\n\r  where nnn =1 to 2 digit decimal number
//==============================================================================
function OnUartCmd(stData$,datalen) as integer
  dim stRS$,vl$
  dim vl,rc

  rc=0  //Assume OK response

  if datalen >= 4 then

    //Drop the terminating CR
    datalen = datalen - 1
    stData$ = left$(stData$,datalen)
    //Extract the command
    stRS$ = strsplitleft$(stData$,3)

    //************ Advertisement related commands ******************************

    if strcmp(stRS$,"ad ")==0 then
      rc = ProcAdvCmd(strvaldec(stData$))

    elseif strcmp(stRS$,"ma ")==0 then
      vl$ = strdehexize$(stData$)
      rc=SaveMacAddr(vl$)

    elseif  strcmp(stRS$,"ai ")==0 then  //Advertising interval in milliseconds
      if SetAdvertInt(strvaldec(stData$)) == 0 then
        rc = 1
      endif

    elseif  strcmp(stRS$,"at ")==0 then  //Advertising timeout in milliseconds
      if SetAdvertTout(strvaldec(stData$)) == 0 then
        rc = 1
      endif

    elseif  strcmp(stRS$,"af ")==0 then  //Advertising filter policy
      if SetAdvertFPol(strvaldec(stData$)) == 0 then
        rc = 1
      endif

    elseif strcmp(stRS$,"fg ")==0 then   //Flags AD value (0..3) see BLE_DISCOVERABILITY_xxx
      advFlags = strvaldec(stData$)

    //************ Profile related commands ************************


    elseif strcmp(stRS$,"sp ")==0 then  //Systolic pressure as nnnn mmHg (decimal)
      sysPressure = strvaldec(stData$)

    elseif strcmp(stRS$,"dp ")==0 then  //Diastolic pressure as nnnn mmHg (decimal)
      diasPressure = strvaldec(stData$)

    elseif strcmp(stRS$,"mp ")==0 then  //Mean arterial pressure as nnnn mmHg (decimal)
      meanPressure = strvaldec(stData$)

    elseif strcmp(stRS$,"ms ")==0 then  //Measurement status as per bit mask is profile spec
      nMeasStatus = strvaldec(stData$)

    elseif strcmp(stRS$,"pr ")==0 then  //Pulse rate as nnnn beats per minute
      nPulseRate = strvaldec(stData$)

    elseif strcmp(stRS$,"dt ")==0 then  //Datetime -- exactly 14 hex digits CCYYMMDDHHMMSS
      dateTime$ = strdehexize$(stData$)
      rc = IsValidDateTime()

    elseif strcmp(stRS$,"bf ")==0 then  //BP feature characteristic value 0..0xFFFF
      bpFeature = strvaldec(stData$)

    elseif strcmp(stRS$,"id ")==0 then  //User ID in range 0 to 255
      nUserId = strvaldec(stData$)

    elseif strcmp(stRS$,"un ")==0 then  //Units, 0 = mmHg, 1 = Pascal
      units = strvaldec(stData$)

    elseif strcmp(stRS$,"sen")==0 then  //Send measurement command
      rc = SendBpData()

    //************ Battery service related commands ****************************

    elseif strcmp(stRS$,"bl ")==0 then
      rc =SetBattLevel(strvaldec(stData$))

    //************ GAP service related commands ****************************

    elseif strcmp(stRS$,"dr ")==0 then
      SetDeviceName(stData$,0)

    elseif strcmp(stRS$,"dw ")==0 then
      SetDeviceName(stData$,1)

    //************ Pairing related commands ************************************

    elseif strcmp(stRS$,"ky ")==0 then
      vl = strvaldec(stData$)
      DbgMsgVal( "Passkey : ",vl )
      rc = SecSendPassKey(hConn,vl)

    elseif strcmp(stRS$,"io ")==0 then
      rc = SecSetIoCap(strvaldec(stData$))

    elseif strcmp(stRS$,"kn ")==0 then
      mnltk = strvaldec(stData$)

    elseif strcmp(stRS$,"kx ")==0 then
      mxltk = strvaldec(stData$)

    elseif strcmp(stRS$,"set")==0 then    //setkey
      rc = SecSetLtkSizeRange(mnltk,mxltk)

    //************ connection related commands ************************************

    elseif  strcmp(stRS$,"in ")==0 then  //Minimum interval (us) for conn parameters
      minint = strvaldec(stData$)

    elseif  strcmp(stRS$,"ix ")==0 then  //Maximum interval (us) for conn parameters
      maxint = strvaldec(stData$)

    elseif  strcmp(stRS$,"st ")==0 then  //Supervision teimout (us) for conn parameters
      sprtout = strvaldec(stData$)

    elseif  strcmp(stRS$,"sl ")==0 then  //Slave latency for conn parameters
      slatncy = strvaldec(stData$)

    elseif strcmp(stRS$,"neg")==0 then
      rc = ConnNewParms(hConn)

    elseif strcmp(stRS$,"dis")==0 then   //Disconnect
      rc = Disconnect(hConn)

    //************ Misc & Debug related commands *******************************

    elseif strcmp(stRS$,"db ")==0 then
      DbgInfo(strvaldec(stData$))

    elseif strcmp(stRS$,"sto")==0 then
      stop

    elseif strcmp(stRS$,"qui")==0 then
      reset(0)
      exitfunc 0

    elseif strcmp(stRS$,"ini")==0 then   //initapp
      OnStartup()
      DbgMsg( "OnStartup() called" )

    //**************************************************************************
    else
      rc = 1
    endif

  else
    rc = 1

  endif

  //Send a response back to the user
  UartRsp(rc)

endfunc 1



//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer

  //Inform libraries
  ConnMngrOnBleMsg(nMsgId,nCtx)
  AdvMngrOnBleMsg(nMsgId,nCtx)

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    DbgMsgVal(" --- Connect : ",nCtx)
    ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_DISCONNECT
    DbgMsgVal(" --- Disconnect : ",nCtx)

  //case BLE_EVBLEMSGID_BPS_INDICATION_STATE
  //  DbgMsgVal(" +++ BPS IND STATE = ",nCtx)
    //if nCtx == 1 then
      //Indications have been enabled
    //endif

  //case BLE_EVBLEMSGID_BPS_INDICATION_CNF
  //  DbgMsg(" +++ BPS IND CNF")
    //Can send next measurement data

  case BLE_EVBLEMSGID_DISPLAY_PASSKEY
    DbgMsgVal("Display Pairing Passkey ",nCtx)

  case BLE_EVBLEMSGID_NEW_BOND
    DbgMsg(" +++ New Bond")

  case BLE_EVBLEMSGID_UPDATED_BOND
    DbgMsg(" +++ Updated Bond")

  case BLE_EVBLEMSGID_ENCRYPTED
    DbgMsg(" +++ Encrypted Connection")

  case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
    DbgMsgVal(" -- Conn to Bonded Master ",nCtx)

  case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
    DbgMsgVal(" +++ Auth Key Request, type=",nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
    ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
    DbgMsg(" ??? Conn Parm Negotiation FAILED")

  case else
    DbgMsgVal("Unknown Ble Msg", nMsgId)
  endselect
endfunc 1

//==============================================================================
// This handler is called when there is a CHARCCCD message
//==============================================================================
function HandlerCharCccd(BYVAL hChar AS INTEGER, BYVAL nVal AS INTEGER) as integer

  if hChar == chBpsMeas then
    //The following if statment to convert to 1 is only so that we can submit
    //this app to the regression test
    if nVal then
      if nVal==2 then
        nVal = 1
      else
        nVal = 0
      endif
    endif
    BpsOnCharCccd(nVal)
    DbgMsgVal(" +++ BPS IND STATE = ",nVal)
  else
    DbgMsgVal(" +++ New CCCD : ",hChar)
  endif
endfunc 1

//==============================================================================
// This handler is called when there is a CHARHVC message
//==============================================================================
function HandlerCharHvc(BYVAL hChar AS INTEGER) as integer
  if hChar == chBpsMeas then
    BpsOnCharHvc()
    DbgMsg(" +++ BPS IND CNF")
  else
    DbgMsgVal(" +++ HVC : ",hChar)
  endif
endfunc 1

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerUartRx() as integer
  dim nMatch
  dim stData$

  nMatch=UartReadMatch(stRsp$,13)
  if nMatch!=0 then
    stData$ = strsplitleft$(stRsp$,nMatch)
    exitfunc OnUartCmd(stData$,nMatch)
  endif
endfunc 1

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerBlrAdvTimOut() as integer

  if AdvMngrOnAdvTimeOut() == 0 then

    DbgMsg( "\nAdvert stopped via timeout" )
    //DbgMsg( "\n   - could use SystemStateSet(0) to switch off" )

    //------------------------------------------------------------
    //  Switch off the system - requires a power cycle to recover
    //------------------------------------------------------------
    //  rc = SystemStateSet(0)
    //  AssertRC(rc, 1490)
  endif

endfunc 1

//==============================================================================
// This handler is called when the BLE PHY is changed
//==============================================================================
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    //print "BLE PHY CHANGED: \n"
    //print "Handle: ";integer.h' hConn;"\n"
    //print "Status: ";integer.h' nStatus;"\n"
    //print "PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
endfunc 1

//==============================================================================
// This handler is called when there is a requiest for PHY change
//==============================================================================
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    dim rc
    // Accept incoming PHY request by default
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVUARTRX           call HandlerUartRx
OnEvent  EVBLE_ADV_TIMEOUT  call HandlerBlrAdvTimOut
OnEvent  EVBLEMSG           call HandlerBleMsg
OnEvent  EVCHARCCCD         call HandlerCharCccd
OnEvent  EVCHARHVC          call HandlerCharHvc
OnEvent  EVBLE_PHY_UPDATED  call HandlerPhyChngd
OnEvent  EVBLE_PHY_REQUEST  call HandlerPhyReq

//------------------------------------------------------------------------------
// Initialise Services and then wait for events
//------------------------------------------------------------------------------
if (AUTO_STARTUP & 1) != 0 then
  //Create Advert packets and register services
  OnStartup()
endif
if (AUTO_STARTUP & 2) != 0 then
  //Start advertising
  dim rc
  rc=StartAds(ADV_IND)
endif

//Send user prompt for uart based command interface
msg$="\n\r"
UartMsg(msg$)
msg$=DEVICENAME
UartMsg(msg$)
msg$="\n\r"
UartMsg(msg$)

//Send an OK response
UartRsp(0)

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent
