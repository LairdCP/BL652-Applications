// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Copyright (c) 2016-2021, Laird Connectivity                                ++
//                                                                            ++
// Permission to use, copy, modify, and/or distribute this software for any   ++
// purpose with or without fee is hereby granted, provided that the above     ++
// copyright notice and this permission notice appear in all copies.          ++
//                                                                            ++
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES   ++
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF           ++
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR    ++
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES     ++
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN      ++
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR ++
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                ++
//                                                                            ++
// SPDX-License-Identifier:ISC                                                ++
//                                                                            ++
//******************************************************************************
//
// BL652 Data Length Extension: this app demonstrates the use of Data Length Extension
// feature on the BL652. This is the peripheral app and should ONLY be used against another
// BL652 loaded with $autorun$.dle.data.length.extension.central.sb
//
//******************************************************************************
//
//
//******************************************************************************
// Definitions
//******************************************************************************
#define ENABLE_DATA_LENGTH_EXTENSION       1

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc                              // Result code variable (used for checking if a function completed successfully or not)
dim BaseUUID                        // Base UUID for the VSP service which other UUIDs will be siblings of

dim svcID                           // VSP Service ID
dim TXchar                          // TX characteristic
dim RXchar                          // RX characteristic
dim MOchar                          // Modem Out characteristic
dim MIchar                          // Modem In characteristic
dim MIval                           // Modem In value

dim ConnectionID                    // Holds the connection ID of the VSP client (if one is connected)
dim RecBuf$ : RecBuf$ = ""          // VSP receive buffer
dim UARTBlocked : UARTBlocked = 0   // When set to 1 will not read data from the UART
dim UartData$                       // Data from the UART waiting to be sent out


dim nBleMaxPacketLength : nBleMaxPacketLength = 27  //Default maximum packet length on BL652
dim nAttributeMTU       : nAttributeMTU = 23        //Default Maximum Transmission Unit on BL652
dim nAttributeLength    : nAttributeLength = 20     //Default Attribute Data Length on BL652

//******************************************************************************
// Initialise Global Variable
//******************************************************************************
ConnectionID = 0

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
// Register Error Handler as early as possible
//------------------------------------------------------------------------------
sub HandlerOnErr()
    print "\n OnErr - ";GetLastError();"\n"
endsub
onerror next HandlerOnErr

//------------------------------------------------------------------------------
// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
sub AssertRC(rc, tag)
    if (rc != 0) then
        print "Assert Error ";rc;" @ tag ";tag;"\r\n"
    endif
endsub

//-------------------------------------------------------------------------------
// Definitions for attribute values needed to achieve Data Length Extension
#define BLE_MAX_CONNECTIONS_AS_PERIPHERAL_KEY_ID 205    // CFG ID 205
#define BLE_MAX_CONNECTIONS_AS_CENTRAL_KEY_ID    206    // CFG ID 205
#define ATTRIBUTE_MTU_KEY_ID                     211    // CFG ID 211
#define ATTRIBUTE_DATA_LENGTH_KEY_ID             212    // CFG ID 212
#define USE_STRING_IN_EVENTS_KEY_ID              213    // CFG ID 213
#define BLE_MAX_PACKET_LENGTH_KEY_ID             216    // CFG ID 216
#define BLE_EVENT_LENGTH_KEY_ID                  219    // CFG ID 219

#define BLE_MAX_CONNECTIONS_AS_PERIPHERAL        1      // Maximum of 1 peripheral connections - Range:0-1
#define BLE_MAX_CONNECTIONS_AS_CENTRAL           1      // Maximum of 1 central connections - Range:1-8
#define ATTRIBUTE_MTU_MAXIMUM                    247    // Attribut Maximum Trnasmission Unit - Range:23-247
#define ATTRIBUTE_DATA_LENGTH_MAXIMUM            244    // Gatt Server Attribute Maximum Length - Range:20-244
#define USE_STRING_IN_EVENTS                     1      // 0: use EVATTRNOTIFY, 1: use EVATTRNOTIFYEX (See user manual)
#define BLE_MAX_PACKET_LENGTH                    251    // BLE Maximum packet length - Range: 27:251
#define BLE_EVENT_LENGTH                         800    // Maximum of 800 packets per connection interval - Range: 2-800

//-------------------------------------------------------------------------------
// This function is used to configure the BL652 to use the maximum Attribute
// Transmission Unit (MTU), maximum Attribute Data Length, and the maximum
// packet length
//-------------------------------------------------------------------------------
FUNCTION DataLengthExtension()
    dim MaxPeripheralConnections, MaxCentralConnections, UseStringsInEvents, EventLength, PerformReset, HasError

    // Get current configuration values
    rc = NvCfgKeyGet(BLE_MAX_CONNECTIONS_AS_PERIPHERAL_KEY_ID, MaxPeripheralConnections)
    AssertRC(rc, 110)
    rc = NvCfgKeyGet(BLE_MAX_CONNECTIONS_AS_CENTRAL_KEY_ID, MaxCentralConnections)
    AssertRC(rc, 112)
    rc = NvCfgKeyGet(ATTRIBUTE_MTU_KEY_ID, nAttributeMTU)
    AssertRC(rc, 114)
    rc = NvCfgKeyGet(ATTRIBUTE_DATA_LENGTH_KEY_ID, nAttributeLength)
    AssertRC(rc, 116)
    rc = NvCfgKeyGet(USE_STRING_IN_EVENTS_KEY_ID, UseStringsInEvents)
    AssertRC(rc, 118)
    rc = NvCfgKeyGet(BLE_MAX_PACKET_LENGTH_KEY_ID, nBleMaxPacketLength)
    AssertRC(rc, 120)
    rc = NvCfgKeyGet(BLE_EVENT_LENGTH_KEY_ID, EventLength)
    AssertRC(rc, 122)

    PerformReset = 0
    HasError = 0

    IF (MaxPeripheralConnections != BLE_MAX_CONNECTIONS_AS_PERIPHERAL) THEN
        rc = NvCfgKeySet(BLE_MAX_CONNECTIONS_AS_PERIPHERAL_KEY_ID, BLE_MAX_CONNECTIONS_AS_PERIPHERAL)
        AssertRC(rc, 129)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (MaxCentralConnections != BLE_MAX_CONNECTIONS_AS_CENTRAL) THEN
        rc = NvCfgKeySet(BLE_MAX_CONNECTIONS_AS_CENTRAL_KEY_ID, BLE_MAX_CONNECTIONS_AS_CENTRAL)
        AssertRC(rc, 139)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (nAttributeMTU != ATTRIBUTE_MTU_MAXIMUM) THEN
        // Change the Attribute MTU to be the maximum allowed by the BL652 (247)
        rc = NvCfgKeySet(ATTRIBUTE_MTU_KEY_ID, ATTRIBUTE_MTU_MAXIMUM)
        AssertRC(rc, 150)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (nAttributeLength != ATTRIBUTE_DATA_LENGTH_MAXIMUM) THEN
        // Change the Attribute Data Length to be the maximum allowed by the BL652 (244)
        rc = NvCfgKeySet(ATTRIBUTE_DATA_LENGTH_KEY_ID, ATTRIBUTE_DATA_LENGTH_MAXIMUM)
        AssertRC(rc, 161)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (UseStringsInEvents != USE_STRING_IN_EVENTS) THEN
        // Allow data to be thrown in messages (i.e. Use EVATTRNOTIFYEX instead of EVATTRNOTIFY)
        rc = NvCfgKeySet(USE_STRING_IN_EVENTS_KEY_ID, USE_STRING_IN_EVENTS)
        AssertRC(rc, 172)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (nBleMaxPacketLength != BLE_MAX_PACKET_LENGTH) THEN
        // Change the maximum packet length to 251 bytes
        rc = NvCfgKeySet(BLE_MAX_PACKET_LENGTH_KEY_ID, BLE_MAX_PACKET_LENGTH)
        AssertRC(rc, 183)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (EventLength != BLE_EVENT_LENGTH) THEN
        rc = NvCfgKeySet(BLE_EVENT_LENGTH_KEY_ID, BLE_EVENT_LENGTH)
        AssertRC(rc, 193)
        IF (rc != 0) THEN
            HasError = 1
        ENDIF

        PerformReset = 1
    ENDIF

    IF (PerformReset == 1) THEN
        IF (HasError == 1) THEN
            PRINT "\n## Module configuration upgrade failed - Application in-operable"
            EXITFUNC 0
        ENDIF

        // Reset the module so that the data is overwritten
        Reset(0)
    ENDIF
ENDFUNC 0
//------------------------------------------------------------------------------
// Start LE Adverts
//------------------------------------------------------------------------------
FUNCTION BleStartAdverts()

    DIM nMinConnInterval, nMaxConnInterval

IF ENABLE_DATA_LENGTH_EXTENSION==1 THEN
    // For packet length extension, the optimum connection interval is 28750 us
    nMinConnInterval = 28000
    nMaxConnInterval = 29000
ELSE
    // For default packet length, the optimum connection interval is 7500 us
    nMinConnInterval = 7500
    nMaxConnInterval = 7700
ENDIF

    // Register GAP service with device name and connection intervals
    dim DevName$ : DevName$ = "LAIRD_BL652"
    rc = BleGapSvcInit(DevName$, 0, 0, nMinConnInterval, nMaxConnInterval, 4000000,  0)

    // Start Ble adverts
    dim Addr$ : Addr$ = ""
    rc = BleAdvertStart(0, Addr$, 250, 0, 0)

ENDFUNC 0

//------------------------------------------------------------------------------
// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
SUB ShowConnParms()
    DIM intrvl,sprvto,slat
    rc = BleGetCurConnParms(ConnectionID,intrvl,sprvto,slat)
    print "## ConnParms :: Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
ENDSUB

//------------------------------------------------------------------------------
// Function that will create a custom VSP service with Tx/Rx characteristics
//------------------------------------------------------------------------------
function CreateVSPService()

    dim TmpStr$, RxUUID, TxUUID, ModemInUUID, ModemOutUUID, mdVal, mdCccd, s$

    // Base UUID
    TmpStr$ = "569a1101b87f490c92cb11ba5ea5167c"
    TmpStr$ = StrDehexize$(TmpStr$)
    BaseUUID = BleHandleUuid128(TmpStr$)

    // Setup Tx/Rx characteristics
    TxUUID = 0x2000
    TxUUID = BleHandleUuidSibling(BaseUUID, TxUUID)
    RxUUID = 0x2001
    RxUUID = BleHandleUuidSibling(BaseUUID, RxUUID)

    // Setup Modem characteristics
    ModemInUUID  = 0x2002
    ModemInUUID = BleHandleUuidSibling(BaseUUID, ModemInUUID)
    ModemOutUUID = 0x2003
    ModemOutUUID = BleHandleUuidSibling(BaseUUID, ModemOutUUID)

    // Create new VSP service
    rc = BleServiceNew(1, BaseUUID, svcID)
    rc = BleServiceCommit(svcID)

    //Create the ModemIn characteristic
    mdVal = BleAttrMetadata(0,1,2,0,rc)
    rc = BleCharNew(8, ModemInUUID, mdVal, 0, 0)
    s$ = "\01" //Enabled by default
    rc = BleCharCommit(svcID, s$, MIchar)

    //Create the ModemOut characteristic
    mdVal = BleAttrMetadata(0,0,2,0,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc) //Metadata for CCCD attribute of Characteristic
    rc = BleCharNew(16, ModemOutUUID, mdVal, mdCccd, 0)
    rc = BleCharCommit(svcID, s$, MOchar)

    //Create the RX characteristic
    mdVal = BleAttrMetadata(0,1,nAttributeLength,1,rc)
    rc = BleCharNew(8, RxUUID, mdVal, 0, 0)
    rc = BleCharCommit(svcID, s$, RXchar)

    //Create the TX characteristic
    mdVal = BleAttrMetadata(0,0,nAttributeLength,1,rc)
    mdCccd = BleAttrMetadata(1,1,2,0,rc) //Metadata for CCCD attribute of Characteristic
    rc = BleCharNew(16, TxUUID, mdVal, mdCccd, 0)
    rc = BleCharCommit(svcID, s$, TXchar)

endfunc 0

//------------------------------------------------------------------------------
// Function to handle Ble event messages
//------------------------------------------------------------------------------
#define BLE_EVBLEMSGID_CONNECT                  0   //nCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT               1   //nCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR            4   //nCtx = resultcode
#define BLE_EVBLEMSGID_NEW_BOND                 10  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE        14  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL   15  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER    16  //nCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND             17  //nCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                18  //nCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING    19  //nCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED              20  //nCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE         21  //nCtx = connection handle
//------------------------------------------------------------------------------
function HndlrBleMsg(nMsgId, nCtx)

    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        PRINT "## Connected\n"
        ConnectionID = nCtx
        ShowConnParms()

    case BLE_EVBLEMSGID_DISCONNECT
        PRINT "## Disconnected!\n"
        dim Addr$ : Addr$ = ""
        rc = BleAdvertStart(0, Addr$, 250, 0, 0)

    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms()

    case else
    endselect

endfunc 1

//------------------------------------------------------------------------------
// EVUARTRX - Function handler for UART data receive
//------------------------------------------------------------------------------
FUNCTION HndlrUartRx()

    dim RdLen, DataToSend$

    IF UARTBlocked == 0 THEN
        RdLen = UARTREADN(UartData$, nAttributeLength)
        // Ensure that we only read nAttribureLength
        DataToSend$ = Left$(UartData$, nAttributeLength)

        // If there is data, send it as notifications
        IF RdLen > 0 THEN
            rc = BLECHARVALUENOTIFY(TXchar, DataToSend$)
            IF rc != 0 THEN
                // We couldn't send, just keep it saved in DataToSend$
                UARTBlocked = 1
            ELSE
                // Shift UartData by the amount that was written
                StrShiftLeft(UartData$,RdLen)
            ENDIF
        ENDIF
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// EVNOTIFYBUF - Notification buffer was emptied
//------------------------------------------------------------------------------
FUNCTION HndlrNtfyBuf()

    IF UARTBlocked == 1 THEN
        UARTBlocked = 0
        rc = HndlrUartRx()
    ELSE
        //Check for UART data
        rc = HndlrUartRx()
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// EVCHARVAL - Handler for characteristic value written
//------------------------------------------------------------------------------
FUNCTION HndlrCharVal(charHandle, offset, len)

    dim Rd$, arc, SLen, SWritten

    arc = BleCharValueRead(charHandle, Rd$)
    IF charHandle == RXchar THEN
        PRINT Rd$
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// EVCHARVALUE - Handler for characteristic value written
//------------------------------------------------------------------------------
FUNCTION HndlrCharValue(nConnHandle, charHandle, offset, len, BYVAL Rd$ AS STRING)

    // Just print the data that we got from the char
    IF charHandle == RXchar THEN
        PRINT Rd$
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRIBUTEMTU - This handler is called when there is an event that the attribute MTU has changed
//------------------------------------------------------------------------------
FUNCTION HandlerAttrMTUchng(BYVAL hCOnn AS INTEGER, BYVAL nSize AS INTEGER)
    print "## Attribute MTU Changed - Size=";nSize;"\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// EVPACKETLENGTH - This handler is called when the packet length is changed
//------------------------------------------------------------------------------
FUNCTION HandlerPacketLength(BYVAL hConn, BYVAL Tx_Octets, BYVAL Tx_Time, BYVAL Rx_Octets, BYVAL Rx_Time)
    print "## Packet Length Changed - Tx=";Tx_Octets;" Rx=";Tx_Octets;"\n"
ENDFUNC 1

//------------------------------------------------------------------------------
// This handler is called when the BLE PHY is changed
//------------------------------------------------------------------------------
function  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    //print "BLE PHY CHANGED: \n"
    //print "Handle: ";integer.h' hConn;"\n"
    //print "Status: ";integer.h' nStatus;"\n"
    //print "PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
endfunc 1

//------------------------------------------------------------------------------
// This handler is called when there is a requiest for PHY change
//------------------------------------------------------------------------------
function  HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    // Accept incoming PHY request by default
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
endfunc 1

//******************************************************************************
// Start up code from here -equivalent to main() in a 'C' application
//******************************************************************************

// Close UART and open at 1000000 baud rate
UARTClose()
rc = UartOpen(1000000, 2048, 800, "CN81H")

// Enable Data Length Extension
IF ENABLE_DATA_LENGTH_EXTENSION==1 THEN
    rc = DataLengthExtension()
ENDIF

// Setup VSP service
rc = CreateVSPService()
// Start LE Adverts
rc = BleStartAdverts()
if rc==0 then
    print "\n## Started Advertising\n"
else
    print "\n## Start Advertising failed rc=";integer.h'rc
endif


//******************************************************************************
//Setup event handlers
//******************************************************************************
// UART events
ONEVENT EVUARTRX          CALL HndlrUartRx
// Generic BLE events
ONEVENT EVBLEMSG          CALL HndlrBleMsg
ONEVENT EVCHARVAL         CALL HndlrCharVal           // Used if AT+CFG 213=0
ONEVENT EVCHARVALUE       CALL HndlrCharValue         // Used if AT+CFG 213=1
ONEVENT EVNOTIFYBUF       CALL HndlrNtfyBuf
// Data Length Extenstion events
ONEVENT EVATTRIBUTEMTU    CALL HandlerAttrMTUchng
ONEVENT EVPACKETLENGTH    CALL HandlerPacketLength
ONEVENT EVBLE_PHY_UPDATED CALL HandlerPhyChngd        // PHY changed
ONEVENT EVBLE_PHY_REQUEST CALL HandlerPhyReq          // PHY change request

//******************************************************************************
//Wait in a lower-power mode for an event to occur
//******************************************************************************
WAITEVENT
